import{j as l}from"./emotion-react-jsx-runtime.browser.esm-780ca0af.js";import{d as B}from"./Check-728b918b.js";import"./fonts-570bed1b.js";import{s as f}from"./styled-b4557e9b.js";import{r as d}from"./index-ebeaab24.js";import{g as I,c as s,h as R,d as q,a as F}from"./useThemeProps-d5e886d2.js";import{g as j,a as E,s as S,r as T,c as H,b as M}from"./styled-7ccf6b9d.js";import{S as N}from"./SwitchBase-73982a76.js";import{c as b}from"./createSvgIcon-bacac1a2.js";import{j as i}from"./jsx-runtime-5926aa06.js";const P=b(i.jsx("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"}),"CheckBoxOutlineBlank"),L=b(i.jsx("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckBox"),A=b(i.jsx("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"}),"IndeterminateCheckBox");function W(o){return E("MuiCheckbox",o)}const U=j("MuiCheckbox",["root","checked","disabled","indeterminate","colorPrimary","colorSecondary"]),h=U,G=["checkedIcon","color","icon","indeterminate","indeterminateIcon","inputProps","size","className"],O=o=>{const{classes:e,indeterminate:n,color:t}=o,a={root:["root",n&&"indeterminate",`color${I(t)}`]},r=M(a,W,e);return s({},e,r)},D=S(N,{shouldForwardProp:o=>T(o)||o==="classes",name:"MuiCheckbox",slot:"Root",overridesResolver:(o,e)=>{const{ownerState:n}=o;return[e.root,n.indeterminate&&e.indeterminate,n.color!=="default"&&e[`color${I(n.color)}`]]}})(({theme:o,ownerState:e})=>s({color:(o.vars||o).palette.text.secondary},!e.disableRipple&&{"&:hover":{backgroundColor:o.vars?`rgba(${e.color==="default"?o.vars.palette.action.activeChannel:o.vars.palette.primary.mainChannel} / ${o.vars.palette.action.hoverOpacity})`:R(e.color==="default"?o.palette.action.active:o.palette[e.color].main,o.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},e.color!=="default"&&{[`&.${h.checked}, &.${h.indeterminate}`]:{color:(o.vars||o).palette[e.color].main},[`&.${h.disabled}`]:{color:(o.vars||o).palette.action.disabled}})),J=i.jsx(L,{}),K=i.jsx(P,{}),Q=i.jsx(A,{}),X=d.forwardRef(function(e,n){var t,a;const r=q({props:e,name:"MuiCheckbox"}),{checkedIcon:u=J,color:p="primary",icon:w=K,indeterminate:c=!1,indeterminateIcon:y=Q,inputProps:_,size:m="medium",className:z}=r,$=F(r,G),g=c?y:w,C=c?y:u,k=s({},r,{color:p,indeterminate:c,size:m}),v=O(k);return i.jsx(D,s({type:"checkbox",inputProps:s({"data-indeterminate":c},_),icon:d.cloneElement(g,{fontSize:(t=g.props.fontSize)!=null?t:m}),checkedIcon:d.cloneElement(C,{fontSize:(a=C.props.fontSize)!=null?a:m}),ownerState:k,ref:n,className:H(v.root,z)},$,{classes:v}))}),Y=X,Z=f("span")(({colorType:o,theme:{palette:e},variant:n,disabled:t})=>{const a=n==="filled",r=e[o],u=t?e.grey[20]:a?r.main:"transparent",p=t?e.grey[20]:r.main;return{width:14,height:14,backgroundColor:u,borderRadius:"2px",border:`2px solid ${p}`,"&:before":{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",display:"block",width:8.89,height:1.78,content:'""',backgroundColor:a?e.grey[0]:r.main},"input:hover:not([disabled]) ~ &":{backgroundColor:a?r.dark:r.light,borderColor:r.dark,"&:before":{backgroundColor:a?e.grey[0]:r.medium}},"input:disabled ~ &":{backgroundColor:a?e.grey[20]:"transparent",border:`2px solid ${e.grey[20]}`,"&:before":{backgroundColor:a?e.grey[0]:e.grey[20]}}}}),V=f(B)(({colorType:o,theme:{palette:e},error:n,disabled:t})=>({width:14,height:14,borderRadius:"2px",border:`2px solid ${n?e.error.main:t?e.grey[20]:e.grey[35]}`,color:"transparent","input:hover:not([disabled]) ~ &":{backgroundColor:e[o].light,borderColor:e[o].dark,color:e[o].medium||e[o].dark}})),ee=f(V)(({colorType:o,theme:{palette:e},variant:n,disabled:t})=>{const a=n==="filled",r=d.useMemo(()=>t&&!a?{color:e.grey[20],borderColor:e.grey[20],backgroundColor:e.grey[0]}:t&&a?{color:e.grey[0],borderColor:e.grey[20],backgroundColor:e.grey[20]}:a?{color:e.grey[0],borderColor:e[o].main,backgroundColor:e[o].main}:{color:e[o].main,borderColor:e[o].main,backgroundColor:e.grey[0]},[o,t,a,e]);return{color:r.color,backgroundColor:r.backgroundColor,borderColor:r.borderColor,"input:hover:not([disabled]) ~ &":{color:r.color,backgroundColor:r.backgroundColor,borderColor:r.borderColor}}}),x=({variant:o="filled",color:e="primary",disabled:n,...t})=>l(Y,{disableFocusRipple:!0,disableRipple:!0,disableTouchRipple:!0,disabled:n,icon:l(V,{colorType:e,error:e==="error",disabled:n}),checkedIcon:l(ee,{colorType:e,variant:o,disabled:n}),indeterminateIcon:l(Z,{colorType:e,variant:o,disabled:n}),...t});try{x.displayName="Checkbox",x.__docgenInfo={description:"",displayName:"Checkbox",props:{variant:{defaultValue:{value:"filled"},description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:'"outlined"'},{value:'"filled"'}]}},color:{defaultValue:{value:"primary"},description:`The color of the component.
It supports both default and custom theme colors, which can be added as shown in the
[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).`,name:"color",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'},{value:'"success"'},{value:'"error"'},{value:'"info"'},{value:'"warning"'}]}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLButtonElement>"}},action:{defaultValue:null,description:"A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",name:"action",required:!1,type:{name:"Ref<ButtonBaseActions>"}},focusVisibleClassName:{defaultValue:null,description:`This prop can help identify which element has keyboard focus.
The class name will be applied when the element gains the focus through keyboard interaction.
It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a \`focus-visible\` class to other components
if needed.`,name:"focusVisibleClassName",required:!1,type:{name:"string"}},LinkComponent:{defaultValue:{value:"'a'"},description:"The component used to render a link when the `href` prop is provided.",name:"LinkComponent",required:!1,type:{name:"ElementType<any>"}},onFocusVisible:{defaultValue:null,description:"Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",name:"onFocusVisible",required:!1,type:{name:"FocusEventHandler<any>"}}}}}catch{}try{checkbox.displayName="checkbox",checkbox.__docgenInfo={description:"",displayName:"checkbox",props:{variant:{defaultValue:{value:"filled"},description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:'"outlined"'},{value:'"filled"'}]}},color:{defaultValue:{value:"primary"},description:`The color of the component.
It supports both default and custom theme colors, which can be added as shown in the
[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).`,name:"color",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'},{value:'"success"'},{value:'"error"'},{value:'"info"'},{value:'"warning"'}]}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLButtonElement>"}},action:{defaultValue:null,description:"A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",name:"action",required:!1,type:{name:"Ref<ButtonBaseActions>"}},focusVisibleClassName:{defaultValue:null,description:`This prop can help identify which element has keyboard focus.
The class name will be applied when the element gains the focus through keyboard interaction.
It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a \`focus-visible\` class to other components
if needed.`,name:"focusVisibleClassName",required:!1,type:{name:"string"}},LinkComponent:{defaultValue:{value:"'a'"},description:"The component used to render a link when the `href` prop is provided.",name:"LinkComponent",required:!1,type:{name:"ElementType<any>"}},onFocusVisible:{defaultValue:null,description:"Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",name:"onFocusVisible",required:!1,type:{name:"FocusEventHandler<any>"}}}}}catch{}export{x as C};
//# sourceMappingURL=checkbox-cf605ba1.js.map
