{"version":3,"file":"masked-text-field-src-lib-masked-text-field-stories-mdx.ef53f652.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACvCA;AACA;AACA;AACA;AAAA;AAUA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAlDA;AAoDA;;;;;;;;;;;;;;;ACjsources":["webpack://novatics/./packages/masked-text-field/src/lib/mask-presets.ts","webpack://novatics/./packages/masked-text-field/src/lib/masked-text-field.tsx","webpack://novatics/./packages/masked-text-field/src/lib/masked-text-field.stories.mdx"],"sourcesContent":["import { AnyMaskedOptions } from 'imask';\n\nexport type MaskPreset =\n  | 'cpf'\n  | 'cnpj'\n  | 'cpf-cnpj'\n  | 'cep'\n  | 'zipcode'\n  | 'phone'\n  | 'card-number';\n\nexport const MASK_PRESETS: { [key: string]: AnyMaskedOptions } = {\n  cpf: {\n    mask: '000.000.000-00',\n  },\n  cnpj: {\n    mask: '00.000.000/0000-00',\n  },\n  'cpf-cnpj': {\n    mask: [\n      { mask: '000.000.000-00', maxLength: 11 },\n      { mask: '00.000.000/0000-00' },\n    ],\n  },\n  cep: {\n    mask: '00.000-000',\n  },\n  zipcode: {\n    mask: '00000-0000',\n  },\n  phone: {\n    mask: '(#00) 000-0000',\n    definitions: {\n      '#': /[1-9]/,\n    },\n  },\n  'card-number': {\n    mask: '0000 0000 0000 0000',\n  },\n};\n","import { useEffect, useMemo, useCallback, useState } from 'react';\nimport { TextField } from '@mui/material';\nimport IMask, { AnyMaskedOptions } from 'imask';\nimport { MaskPreset, MASK_PRESETS } from './mask-presets';\n\nexport interface MaskedTextFieldProps {\n  onChange: (value: string) => void;\n  initialValue?: string;\n  iMaskProps?: AnyMaskedOptions;\n  maskPreset?: MaskPreset;\n  outputFormat?: 'masked' | 'unmasked';\n}\n\nexport function MaskedTextField(props: MaskedTextFieldProps) {\n  const {\n    maskPreset,\n    iMaskProps,\n    initialValue = '',\n    onChange,\n    outputFormat = 'unmasked',\n    ...rest\n  } = props;\n  const [maskedValue, setMaskedValue] = useState('');\n\n  const maskOptions = useMemo(() => {\n    if (maskPreset) {\n      return MASK_PRESETS[maskPreset];\n    }\n    if (iMaskProps) {\n      return iMaskProps;\n    }\n    return {\n      mask: String,\n    };\n  }, [iMaskProps, maskPreset]);\n\n  const masked = useMemo(() => IMask.createMask(maskOptions), [maskOptions]);\n\n  useEffect(() => {\n    if (initialValue) {\n      masked.resolve(initialValue.toString());\n      setMaskedValue(masked.value);\n    }\n  }, [masked, initialValue]);\n\n  const maskInput = useCallback(\n    (stgValue: string) => {\n      masked.resolve(stgValue);\n      const onChangeValue =\n        outputFormat === 'unmasked' ? masked.unmaskedValue : masked.value;\n      onChange(onChangeValue || '');\n      setMaskedValue(masked.value);\n    },\n    [masked, outputFormat, onChange]\n  );\n\n  return (\n    <TextField\n      value={maskedValue}\n      onChange={(e) => maskInput(e.target.value)}\n      {...rest}\n    />\n  );\n}\n\nexport default MaskedTextField;\n","\nimport React from 'react';\n\n/*setup on change*/\n\n/*setup on change*/\nimport { useMDXComponents as _provideComponents } from \"@storybook/addon-essentials/docs/mdx-react-shim\";\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs/blocks';\nimport { ComponentStory, ComponentMeta } from '@storybook/react';\nimport pkg from '../../package.json';\nimport { MaskedTextField } from './masked-text-field';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, { ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {})\n  }) : _createMdxContent();\n\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      h3: \"h3\",\n      code: \"code\",\n      pre: \"pre\",\n      a: \"a\",\n      div: \"div\"\n    }, _provideComponents(), props.components);\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Meta, {\n        title: \"Masked Textfield\",\n        component: MaskedTextField\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.h1, {\n        id: \"maskedtextfield-\",\n        children: [\"MaskedTextField \", /*#__PURE__*/_jsx(\"img\", {\n          src: `https://img.shields.io/badge/Version-v${pkg.version}-brightgreenn`\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"Use this component for masked inputs\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"installation\",\n        children: \"Installation\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n        children: [\"First install the latest version of the package from \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"@novatics/masked-text-field\"\n        }), \".\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"yarn add @novatics/masked-text-field\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"dependencies\",\n        children: \"Dependencies\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n        children: [\"This component extends \", /*#__PURE__*/_jsx(_components.a, {\n          href: \"https://mui.com/material-ui/react-text-field\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Material UI React Text Field\"\n        }), \". Therefore is needed to install Material UI:\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"yarn add @mui/material @emotion/react @emotion/styled\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"basic-usage\",\n        children: \"Basic Usage\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n        children: [\"The imaskProps attribute is implemented as per the \", /*#__PURE__*/_jsx(_components.a, {\n          href: \"https://imask.js.org/guide.html#masked-base\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"iMask documentation\"\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Basic Usage\",\n          children: args => {\n            return /*#__PURE__*/_jsx(_components.div, {\n              style: {\n                display: 'flex',\n                flexDirection: 'row'\n              },\n              children: /*#__PURE__*/_jsx(MaskedTextField, {\n                initialValue: 123456789,\n                iMaskProps: {\n                  mask: '000-000-000-000'\n                },\n                onChange: e => {\n                  /*setup on change*/\n                },\n                ...args\n              })\n            });\n          }\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-tsx\",\n          children: \"import MaskedTextField from '@novatics/masked-text-field';\\n\\n<MaskedTextField\\n  initialValue={123456789}\\n  iMaskProps={{ mask: '000-000-000-000' }}\\n  onChange={(e) => {\\n    /* setup on change */\\n  }}\\n  {...args}\\n/>;\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"presets\",\n        children: \"Presets\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n        children: [\"It is possible to use the maskPreset attribute to use one of the \", /*#__PURE__*/_jsx(_components.a, {\n          href: \"https://github.com/Novatics/novatics-ui/blob/master/packages/masked-text-field/src/lib/mask-presets.ts\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"pre-configured masks\"\n        }), \".\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Presets\",\n          children: args => {\n            return /*#__PURE__*/_jsx(_components.div, {\n              style: {\n                display: 'flex',\n                flexDirection: 'row'\n              },\n              children: /*#__PURE__*/_jsx(MaskedTextField, {\n                initialValue: 12345678901,\n                maskPreset: \"cpf\",\n                onChange: e => {\n                  /*setup on change*/\n                },\n                ...args\n              })\n            });\n          }\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-tsx\",\n          children: \"import MaskedTextField from '@novatics/masked-text-field';\\n\\n<MaskedTextField\\n  initialValue={12345678901}\\n  maskPreset=\\\"cpf\\\"\\n  onChange={(e) => {\\n    /* setup on change */\\n  }}\\n  {...args}\\n/>;\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"playground\",\n        children: \"Playground\"\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Playground\",\n          argTypes: {\n            onChange: {\n              description: \"Input's onChange method.\"\n            },\n            initialValue: {\n              description: \"Input's initial value.\"\n            },\n            maskPreset: {\n              description: 'maskPreset has a higher priority than iMaskProps, this means that if the maskPreset is not null it will override iMaskProps'\n            },\n            outputFormat: {\n              description: \"Format type returned on onChange Method. 'masked' -> masked value, as shown. 'unmasked' -> unmasked number.\"\n            }\n          },\n          children: args => {\n            return /*#__PURE__*/_jsx(_components.div, {\n              style: {\n                display: 'flex',\n                flexDirection: 'row'\n              },\n              children: /*#__PURE__*/_jsx(MaskedTextField, { ...args\n              })\n            });\n          }\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(ArgsTable, {\n        story: \"Playground\"\n      })]\n    });\n  }\n}\n/* ========= */\n\n\nexport const basicUsage = args => {\n  return /*#__PURE__*/_jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\"\n    },\n    children: /*#__PURE__*/_jsx(MaskedTextField, {\n      initialValue: 123456789,\n      iMaskProps: {\n        mask: \"000-000-000-000\"\n      },\n      onChange: e => {\n        /* setup on change */\n      },\n      ...args\n    })\n  });\n};\nbasicUsage.storyName = 'Basic Usage';\nbasicUsage.parameters = {\n  storySource: {\n    source: 'args => {\\n  return <div style={{\\n    display: \\\"flex\\\",\\n    flexDirection: \\\"row\\\"\\n  }}>\\n          <MaskedTextField initialValue={123456789} iMaskProps={{\\n      mask: \\\"000-000-000-000\\\"\\n    }} onChange={e => {\\n      /* setup on change */\\n    }} {...args} />\\n        </div>;\\n}'\n  }\n};\nexport const presets = args => {\n  return /*#__PURE__*/_jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\"\n    },\n    children: /*#__PURE__*/_jsx(MaskedTextField, {\n      initialValue: 12345678901,\n      maskPreset: \"cpf\",\n      onChange: e => {\n        /* setup on change */\n      },\n      ...args\n    })\n  });\n};\npresets.storyName = 'Presets';\npresets.parameters = {\n  storySource: {\n    source: 'args => {\\n  return <div style={{\\n    display: \\\"flex\\\",\\n    flexDirection: \\\"row\\\"\\n  }}>\\n          <MaskedTextField initialValue={12345678901} maskPreset=\\\"cpf\\\" onChange={e => {\\n      /* setup on change */\\n    }} {...args} />\\n        </div>;\\n}'\n  }\n};\nexport const playground = args => {\n  return /*#__PURE__*/_jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\"\n    },\n    children: /*#__PURE__*/_jsx(MaskedTextField, { ...args\n    })\n  });\n};\nplayground.storyName = 'Playground';\nplayground.argTypes = {\n  onChange: {\n    description: \"Input's onChange method.\"\n  },\n  initialValue: {\n    description: \"Input's initial value.\"\n  },\n  maskPreset: {\n    description: \"maskPreset has a higher priority than iMaskProps, this means that if the maskPreset is not null it will override iMaskProps\"\n  },\n  outputFormat: {\n    description: \"Format type returned on onChange Method. 'masked' -> masked value, as shown. 'unmasked' -> unmasked number.\"\n  }\n};\nplayground.parameters = {\n  storySource: {\n    source: 'args => {\\n  return <div style={{\\n    display: \\\"flex\\\",\\n    flexDirection: \\\"row\\\"\\n  }}>\\n          <MaskedTextField {...args} />\\n        </div>;\\n}'\n  }\n};\nconst componentMeta = {\n  title: 'Masked Textfield',\n  component: MaskedTextField,\n  tags: ['stories-mdx'],\n  includeStories: [\"basicUsage\", \"presets\", \"playground\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = { ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;"],"names":[],"sourceRoot":""}