{"version":3,"file":"tokens-src-lib-__stories__-tokens-stories-mdx.0ec9f5aa.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;ACtsources":["webpack://novatics/./packages/tokens/src/lib/__stories__/constants.ts","webpack://novatics/./packages/tokens/src/lib/__stories__/tokens.stories.mdx"],"sourcesContent":["import keys from 'lodash.keys';\nimport includes from 'lodash.includes';\nimport snakecase from 'lodash.snakecase';\nimport startcase from 'lodash.startcase';\n\nimport Tokens from '../tokens';\n\nconst LIGHTER_COLORS = ['newMoon', 'halo', 'supernova'];\nexport const formatColorName = (color) =>\n  startcase(snakecase(color)).replace('_', ' ');\nexport const getColorTextColor = (color) => {\n  if (includes(color, '--light')) return '#000000';\n  if (includes(LIGHTER_COLORS, color)) return '#000000';\n  return '#FFFFFF';\n};\nexport const defaultColors = keys(Tokens.colors)\n  .filter((color) => !includes(color, '--'))\n  .map((color) => formatColorName(color));\nconst collator = new Intl.Collator(undefined, {\n  numeric: true,\n  sensitivity: 'base',\n});\nexport const sortedSpacings = keys(Tokens.spacings).sort(collator.compare);\n","\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"@storybook/addon-essentials/docs/mdx-react-shim\";\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs/blocks';\nimport { ComponentStory, ComponentMeta } from '@storybook/react';\nimport Stack from '@mui/material/Stack';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport keys from 'lodash.keys';\nimport includes from 'lodash.includes';\nimport snakecase from 'lodash.snakecase';\nimport startcase from 'lodash.startcase';\nimport pkg from '../../../package.json';\nimport Tokens from '../tokens';\nimport { formatColorName, getColorTextColor, defaultColors, sortedSpacings } from './constants';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, { ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {})\n  }) : _createMdxContent();\n\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      pre: \"pre\",\n      code: \"code\",\n      h3: \"h3\",\n      span: \"span\"\n    }, _provideComponents(), props.components);\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Meta, {\n        title: \"Tokens\",\n        component: Tokens\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.h1, {\n        id: \"tokens-\",\n        children: [\"Tokens \", /*#__PURE__*/_jsx(\"img\", {\n          src: `https://img.shields.io/badge/Version-v${pkg.version}-brightgreenn`\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"Here we provide the novatics tokens stylesheet. This package is used on our style component to create components with our brand!\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"You can install the package with\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-shell\",\n          children: \"  yarn add -D @novatics/tokens\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-shell\",\n          children: \"  npm install --dev @novatics/tokens\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"and use it\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-tsx\",\n          children: \"import Tokens, { colors, borderRadius, shadows, spacing, typography } from '@novatics/tokens';\\n\\n  ...\\n  color: Tokens.colors.nebula.main\\n  backgroundColor: colors.nebula.light\\n  ...\\n\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"colors\",\n        children: \"Colors\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(\"p\", {\n        children: [/*#__PURE__*/_jsx(_components.p, {\n          children: \"We have some awesome colors in our theme:\"\n        }), defaultColors.map((c, i) => i === defaultColors.length - 1 ? `and ${c}` : `${c}, `).join(''), /*#__PURE__*/_jsx(_components.p, {\n          children: \"Some of the colors have variants.\"\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(_components.p, {\n          children: [\"The variant can be accessed by adding '--variant' to the token. For example:\", ' ', \"\\n\", /*#__PURE__*/_jsx(\"strong\", {\n            children: \"\\\"nebula--dark\\\": \\\"#5D23C9\\\"\"\n          })]\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Colors\",\n          children: args => {\n            return /*#__PURE__*/_jsx(Grid, {\n              container: true,\n              spacing: 2,\n              children: keys(Tokens.colors).map(name => /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xs: 3,\n                children: /*#__PURE__*/_jsx(Stack, {\n                  spacing: 1,\n                  children: /*#__PURE__*/_jsxs(Paper, {\n                    square: true,\n                    sx: {\n                      padding: 3,\n                      height: '106px',\n                      backgroundColor: Tokens.colors[name]\n                    },\n                    children: [/*#__PURE__*/_jsx(Typography, {\n                      variant: \"body\",\n                      fontWeight: \"700\",\n                      color: getColorTextColor(name),\n                      children: formatColorName(name)\n                    }), /*#__PURE__*/_jsxs(Typography, {\n                      variant: \"bodySmall\",\n                      color: getColorTextColor(name),\n                      children: [/*#__PURE__*/_jsx(_components.span, {\n                        style: {\n                          opacity: 0.7\n                        },\n                        children: \"HEX\"\n                      }), ' ', Tokens.colors[name]]\n                    }), /*#__PURE__*/_jsxs(Typography, {\n                      variant: \"bodySmall\",\n                      color: getColorTextColor(name),\n                      children: [/*#__PURE__*/_jsx(_components.span, {\n                        style: {\n                          opacity: 0.7\n                        },\n                        children: \"TOKEN\"\n                      }), \" \", name]\n                    })]\n                  })\n                })\n              }))\n            });\n          }\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"border-radius\",\n        children: \"Border Radius\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(\"p\", {\n        children: [/*#__PURE__*/_jsxs(_components.p, {\n          children: [\"Our round corners are defined here with three options: small, regular and\\nlarge. We provide the \", /*#__PURE__*/_jsx(\"strong\", {\n            children: \"number\"\n          }), \" option for pixel or rem.\"]\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(_components.p, {\n          children: [\"The values can be retrived by\", ' ', \"\\n\", /*#__PURE__*/_jsxs(\"strong\", {\n            children: [\"\\\"borderRadius.small\\\": \", `{ \"px\": 8, \"rem\": 0.5 }`, \"'\"]\n          })]\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Border Radius\",\n          children: args => {\n            return /*#__PURE__*/_jsxs(Grid, {\n              container: true,\n              spacing: 4,\n              children: [/*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xs: 4,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 1,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"h5\",\n                    fontWeight: \"700\",\n                    children: \"Small\"\n                  }), /*#__PURE__*/_jsx(Typography, {\n                    variant: \"caption\",\n                    children: \"borderRadius.small\"\n                  }), /*#__PURE__*/_jsxs(Stack, {\n                    direction: \"row\",\n                    spacing: 3,\n                    children: [/*#__PURE__*/_jsx(Box, {\n                      height: \"108px\",\n                      width: \"256px\",\n                      borderRadius: `${Tokens.borderRadius.small.px}px`,\n                      backgroundColor: Tokens.colors.cosmos\n                    }), /*#__PURE__*/_jsxs(Stack, {\n                      spacing: 1,\n                      children: [/*#__PURE__*/_jsx(Typography, {\n                        variant: \"bodySmall\",\n                        children: \"Corner Radius\"\n                      }), /*#__PURE__*/_jsx(Box, {\n                        borderLeft: \"1px solid black\",\n                        height: \"40px\",\n                        pl: 1,\n                        children: /*#__PURE__*/_jsx(Typography, {\n                          variant: \"caption\",\n                          children: `${Tokens.borderRadius.small.px}px`\n                        })\n                      })]\n                    })]\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xs: 4,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 1,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"h5\",\n                    fontWeight: \"700\",\n                    children: \"Regular\"\n                  }), /*#__PURE__*/_jsx(Typography, {\n                    variant: \"caption\",\n                    children: \"borderRadius.regular\"\n                  }), /*#__PURE__*/_jsxs(Stack, {\n                    direction: \"row\",\n                    spacing: 3,\n                    children: [/*#__PURE__*/_jsx(Box, {\n                      height: \"108px\",\n                      width: \"256px\",\n                      borderRadius: `${Tokens.borderRadius.regular.px}px`,\n                      backgroundColor: Tokens.colors.cosmos\n                    }), /*#__PURE__*/_jsxs(Stack, {\n                      spacing: 1,\n                      children: [/*#__PURE__*/_jsx(Typography, {\n                        variant: \"bodySmall\",\n                        children: \"Corner Radius\"\n                      }), /*#__PURE__*/_jsx(Box, {\n                        borderLeft: \"1px solid black\",\n                        height: \"40px\",\n                        pl: 1,\n                        children: /*#__PURE__*/_jsx(Typography, {\n                          variant: \"caption\",\n                          children: `${Tokens.borderRadius.regular.px}px`\n                        })\n                      })]\n                    })]\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xs: 4,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 1,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"h5\",\n                    fontWeight: \"700\",\n                    children: \"Large\"\n                  }), /*#__PURE__*/_jsx(Typography, {\n                    variant: \"caption\",\n                    children: \"borderRadius.large\"\n                  }), /*#__PURE__*/_jsxs(Stack, {\n                    direction: \"row\",\n                    spacing: 3,\n                    children: [/*#__PURE__*/_jsx(Box, {\n                      height: \"108px\",\n                      width: \"256px\",\n                      borderRadius: `${Tokens.borderRadius.large.px}px`,\n                      backgroundColor: Tokens.colors.cosmos\n                    }), /*#__PURE__*/_jsxs(Stack, {\n                      spacing: 1,\n                      children: [/*#__PURE__*/_jsx(Typography, {\n                        variant: \"bodySmall\",\n                        children: \"Corner Radius\"\n                      }), /*#__PURE__*/_jsx(Box, {\n                        borderLeft: \"1px solid black\",\n                        height: \"40px\",\n                        pl: 1,\n                        children: /*#__PURE__*/_jsx(Typography, {\n                          variant: \"caption\",\n                          children: `${Tokens.borderRadius.large.px}px`\n                        })\n                      })]\n                    })]\n                  })]\n                })\n              })]\n            });\n          }\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"spacings\",\n        children: \"Spacings\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(\"p\", {\n        children: [/*#__PURE__*/_jsxs(_components.p, {\n          children: [\"All of our spacings are a multiple of 8. The initial value is 0.5 and goes to\\n12. Be aware that we \", /*#__PURE__*/_jsx(\"strong\", {\n            children: \"don't\"\n          }), \" have each step of the series.\"]\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(_components.p, {\n          children: [\"Values can be retrived by\", ' ', \"\\n\", /*#__PURE__*/_jsxs(\"strong\", {\n            children: [\"\\\"spacings[\\\"0.5\\\"]: \", `{ \"px\": 4, \"rem\": 0.25 }`, \"'\"]\n          })]\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Spacings\",\n          children: args => {\n            return /*#__PURE__*/_jsx(Stack, {\n              spacing: 1,\n              children: sortedSpacings.map(spacing => /*#__PURE__*/_jsxs(Box, {\n                display: \"flex\",\n                alignItems: \"center\",\n                children: [/*#__PURE__*/_jsx(Box, {\n                  height: `${Tokens.spacings[spacing].px}px`,\n                  width: \"40%\",\n                  backgroundColor: Tokens.colors['nebula--light'],\n                  borderTop: `1px dashed ${Tokens.colors.nebula}`,\n                  borderBottom: `1px dashed ${Tokens.colors.nebula}`,\n                  mr: 3\n                }), /*#__PURE__*/_jsxs(Stack, {\n                  direction: \"row\",\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsx(Box, {\n                    width: \"100px\",\n                    children: /*#__PURE__*/_jsxs(Typography, {\n                      variant: \"body\",\n                      children: [\"spacings[\", spacing, \"]\"]\n                    })\n                  }), /*#__PURE__*/_jsxs(Typography, {\n                    variant: \"body\",\n                    sx: {\n                      opacity: '0.7'\n                    },\n                    children: [spacing, \" * 8 = \", Number(spacing) * 8, \"px\"]\n                  })]\n                })]\n              }))\n            });\n          }\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"shadows\",\n        children: \"Shadows\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(\"p\", {\n        children: [/*#__PURE__*/_jsx(_components.p, {\n          children: \"For shadows, we create two entities: Blackhole and Cosmos. Both have four\\nvariants: low, medium, intermediate and high.\"\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(_components.p, {\n          children: [\"To get the values combine the desired name with the '--variant'\", ' ']\n        }), /*#__PURE__*/_jsx(\"strong\", {\n          children: /*#__PURE__*/_jsx(_components.p, {\n            children: \"\\\"shadows[\\\"blackhole--high\\\"]: \\\"0px 16px 32px 4px rgba(37, 37, 37, 0.13)\\\"\\\"\"\n          })\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Shadows\",\n          children: args => {\n            return /*#__PURE__*/_jsxs(Grid, {\n              container: true,\n              spacing: 4,\n              children: [/*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xs: 6,\n                children: /*#__PURE__*/_jsx(Stack, {\n                  spacing: 5,\n                  children: ['low', 'medium', 'intermediate', 'high'].map(variant => /*#__PURE__*/_jsxs(Stack, {\n                    spacing: 1,\n                    children: [/*#__PURE__*/_jsx(Typography, {\n                      variant: \"bodySmall\",\n                      children: `blackhole--${variant}`\n                    }), /*#__PURE__*/_jsx(Box, {\n                      height: \"108px\",\n                      width: \"90%\",\n                      sx: {\n                        boxShadow: Tokens.shadows[`blackhole--${variant}`]\n                      }\n                    })]\n                  }))\n                })\n              }), /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xs: 6,\n                children: /*#__PURE__*/_jsx(Stack, {\n                  spacing: 5,\n                  children: ['low', 'medium', 'intermediate', 'high'].map(variant => /*#__PURE__*/_jsxs(Stack, {\n                    spacing: 1,\n                    children: [/*#__PURE__*/_jsx(Typography, {\n                      variant: \"bodySmall\",\n                      children: `cosmos--${variant}`\n                    }), /*#__PURE__*/_jsx(Box, {\n                      height: \"108px\",\n                      width: \"90%\",\n                      sx: {\n                        boxShadow: Tokens.shadows[`cosmos--${variant}`]\n                      }\n                    })]\n                  }))\n                })\n              })]\n            });\n          }\n        })\n      })]\n    });\n  }\n}\n/* ========= */\n\n\nexport const colors = args => {\n  return /*#__PURE__*/_jsx(Grid, {\n    container: true,\n    spacing: 2,\n    children: keys(Tokens.colors).map(name => /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 3,\n      children: /*#__PURE__*/_jsx(Stack, {\n        spacing: 1,\n        children: /*#__PURE__*/_jsxs(Paper, {\n          square: true,\n          sx: {\n            padding: 3,\n            height: \"106px\",\n            backgroundColor: Tokens.colors[name]\n          },\n          children: [/*#__PURE__*/_jsx(Typography, {\n            variant: \"body\",\n            fontWeight: \"700\",\n            color: getColorTextColor(name),\n            children: formatColorName(name)\n          }), /*#__PURE__*/_jsxs(Typography, {\n            variant: \"bodySmall\",\n            color: getColorTextColor(name),\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              style: {\n                opacity: 0.7\n              },\n              children: \"HEX\"\n            }), \" \", Tokens.colors[name]]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            variant: \"bodySmall\",\n            color: getColorTextColor(name),\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              style: {\n                opacity: 0.7\n              },\n              children: \"TOKEN\"\n            }), \" \", name]\n          })]\n        })\n      })\n    }))\n  });\n};\ncolors.storyName = 'Colors';\ncolors.parameters = {\n  storySource: {\n    source: 'args => {\\n  return <Grid container spacing={2}>\\n          {keys(Tokens.colors).map(name => <Grid item xs={3}>\\n              <Stack spacing={1}>\\n                <Paper square sx={{\\n          padding: 3,\\n          height: \\\"106px\\\",\\n          backgroundColor: Tokens.colors[name]\\n        }}>\\n                  <Typography variant=\\\"body\\\" fontWeight=\\\"700\\\" color={getColorTextColor(name)}>\\n                    {formatColorName(name)}\\n                  </Typography>\\n                  <Typography variant=\\\"bodySmall\\\" color={getColorTextColor(name)}>\\n                    <span style={{\\n              opacity: 0.7\\n            }}>HEX</span>{\\\" \\\"}\\n                    {Tokens.colors[name]}\\n                  </Typography>\\n                  <Typography variant=\\\"bodySmall\\\" color={getColorTextColor(name)}>\\n                    <span style={{\\n              opacity: 0.7\\n            }}>TOKEN</span> {name}\\n                  </Typography>\\n                </Paper>\\n              </Stack>\\n            </Grid>)}\\n        </Grid>;\\n}'\n  }\n};\nexport const borderRadius = args => {\n  return /*#__PURE__*/_jsxs(Grid, {\n    container: true,\n    spacing: 4,\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 4,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 1,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"h5\",\n          fontWeight: \"700\",\n          children: \"Small\"\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          children: \"borderRadius.small\"\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"row\",\n          spacing: 3,\n          children: [/*#__PURE__*/_jsx(Box, {\n            height: \"108px\",\n            width: \"256px\",\n            borderRadius: `${Tokens.borderRadius.small.px}px`,\n            backgroundColor: Tokens.colors.cosmos\n          }), /*#__PURE__*/_jsxs(Stack, {\n            spacing: 1,\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"bodySmall\",\n              children: \"Corner Radius\"\n            }), /*#__PURE__*/_jsx(Box, {\n              borderLeft: \"1px solid black\",\n              height: \"40px\",\n              pl: 1,\n              children: /*#__PURE__*/_jsx(Typography, {\n                variant: \"caption\",\n                children: `${Tokens.borderRadius.small.px}px`\n              })\n            })]\n          })]\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 4,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 1,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"h5\",\n          fontWeight: \"700\",\n          children: \"Regular\"\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          children: \"borderRadius.regular\"\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"row\",\n          spacing: 3,\n          children: [/*#__PURE__*/_jsx(Box, {\n            height: \"108px\",\n            width: \"256px\",\n            borderRadius: `${Tokens.borderRadius.regular.px}px`,\n            backgroundColor: Tokens.colors.cosmos\n          }), /*#__PURE__*/_jsxs(Stack, {\n            spacing: 1,\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"bodySmall\",\n              children: \"Corner Radius\"\n            }), /*#__PURE__*/_jsx(Box, {\n              borderLeft: \"1px solid black\",\n              height: \"40px\",\n              pl: 1,\n              children: /*#__PURE__*/_jsx(Typography, {\n                variant: \"caption\",\n                children: `${Tokens.borderRadius.regular.px}px`\n              })\n            })]\n          })]\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 4,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 1,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"h5\",\n          fontWeight: \"700\",\n          children: \"Large\"\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          children: \"borderRadius.large\"\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"row\",\n          spacing: 3,\n          children: [/*#__PURE__*/_jsx(Box, {\n            height: \"108px\",\n            width: \"256px\",\n            borderRadius: `${Tokens.borderRadius.large.px}px`,\n            backgroundColor: Tokens.colors.cosmos\n          }), /*#__PURE__*/_jsxs(Stack, {\n            spacing: 1,\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"bodySmall\",\n              children: \"Corner Radius\"\n            }), /*#__PURE__*/_jsx(Box, {\n              borderLeft: \"1px solid black\",\n              height: \"40px\",\n              pl: 1,\n              children: /*#__PURE__*/_jsx(Typography, {\n                variant: \"caption\",\n                children: `${Tokens.borderRadius.large.px}px`\n              })\n            })]\n          })]\n        })]\n      })\n    })]\n  });\n};\nborderRadius.storyName = 'Border Radius';\nborderRadius.parameters = {\n  storySource: {\n    source: 'args => {\\n  return <Grid container spacing={4}>\\n          <Grid item xs={4}>\\n            <Stack spacing={1}>\\n              <Typography variant=\\\"h5\\\" fontWeight=\\\"700\\\">\\n                Small\\n              </Typography>\\n              <Typography variant=\\\"caption\\\">borderRadius.small</Typography>\\n              <Stack direction=\\\"row\\\" spacing={3}>\\n                <Box height=\\\"108px\\\" width=\\\"256px\\\" borderRadius={`${Tokens.borderRadius.small.px}px`} backgroundColor={Tokens.colors.cosmos} />\\n                <Stack spacing={1}>\\n                  <Typography variant=\\\"bodySmall\\\">Corner Radius</Typography>\\n                  <Box borderLeft=\\\"1px solid black\\\" height=\\\"40px\\\" pl={1}>\\n                    <Typography variant=\\\"caption\\\">\\n                      {`${Tokens.borderRadius.small.px}px`}\\n                    </Typography>\\n                  </Box>\\n                </Stack>\\n              </Stack>\\n            </Stack>\\n          </Grid>\\n          <Grid item xs={4}>\\n            <Stack spacing={1}>\\n              <Typography variant=\\\"h5\\\" fontWeight=\\\"700\\\">\\n                Regular\\n              </Typography>\\n              <Typography variant=\\\"caption\\\">borderRadius.regular</Typography>\\n              <Stack direction=\\\"row\\\" spacing={3}>\\n                <Box height=\\\"108px\\\" width=\\\"256px\\\" borderRadius={`${Tokens.borderRadius.regular.px}px`} backgroundColor={Tokens.colors.cosmos} />\\n                <Stack spacing={1}>\\n                  <Typography variant=\\\"bodySmall\\\">Corner Radius</Typography>\\n                  <Box borderLeft=\\\"1px solid black\\\" height=\\\"40px\\\" pl={1}>\\n                    <Typography variant=\\\"caption\\\">\\n                      {`${Tokens.borderRadius.regular.px}px`}\\n                    </Typography>\\n                  </Box>\\n                </Stack>\\n              </Stack>\\n            </Stack>\\n          </Grid>\\n          <Grid item xs={4}>\\n            <Stack spacing={1}>\\n              <Typography variant=\\\"h5\\\" fontWeight=\\\"700\\\">\\n                Large\\n              </Typography>\\n              <Typography variant=\\\"caption\\\">borderRadius.large</Typography>\\n              <Stack direction=\\\"row\\\" spacing={3}>\\n                <Box height=\\\"108px\\\" width=\\\"256px\\\" borderRadius={`${Tokens.borderRadius.large.px}px`} backgroundColor={Tokens.colors.cosmos} />\\n                <Stack spacing={1}>\\n                  <Typography variant=\\\"bodySmall\\\">Corner Radius</Typography>\\n                  <Box borderLeft=\\\"1px solid black\\\" height=\\\"40px\\\" pl={1}>\\n                    <Typography variant=\\\"caption\\\">\\n                      {`${Tokens.borderRadius.large.px}px`}\\n                    </Typography>\\n                  </Box>\\n                </Stack>\\n              </Stack>\\n            </Stack>\\n          </Grid>\\n        </Grid>;\\n}'\n  }\n};\nexport const spacings = args => {\n  return /*#__PURE__*/_jsx(Stack, {\n    spacing: 1,\n    children: sortedSpacings.map(spacing => /*#__PURE__*/_jsxs(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsx(Box, {\n        height: `${Tokens.spacings[spacing].px}px`,\n        width: \"40%\",\n        backgroundColor: Tokens.colors[\"nebula--light\"],\n        borderTop: `1px dashed ${Tokens.colors.nebula}`,\n        borderBottom: `1px dashed ${Tokens.colors.nebula}`,\n        mr: 3\n      }), /*#__PURE__*/_jsxs(Stack, {\n        direction: \"row\",\n        spacing: 2,\n        children: [/*#__PURE__*/_jsx(Box, {\n          width: \"100px\",\n          children: /*#__PURE__*/_jsxs(Typography, {\n            variant: \"body\",\n            children: [\"spacings[\", spacing, \"]\"]\n          })\n        }), /*#__PURE__*/_jsxs(Typography, {\n          variant: \"body\",\n          sx: {\n            opacity: \"0.7\"\n          },\n          children: [spacing, \" * 8 = \", Number(spacing) * 8, \"px\"]\n        })]\n      })]\n    }))\n  });\n};\nspacings.storyName = 'Spacings';\nspacings.parameters = {\n  storySource: {\n    source: 'args => {\\n  return <Stack spacing={1}>\\n          {sortedSpacings.map(spacing => <Box display=\\\"flex\\\" alignItems=\\\"center\\\">\\n              <Box height={`${Tokens.spacings[spacing].px}px`} width=\\\"40%\\\" backgroundColor={Tokens.colors[\\\"nebula--light\\\"]} borderTop={`1px dashed ${Tokens.colors.nebula}`} borderBottom={`1px dashed ${Tokens.colors.nebula}`} mr={3} />\\n              <Stack direction=\\\"row\\\" spacing={2}>\\n                <Box width=\\\"100px\\\">\\n                  <Typography variant=\\\"body\\\">spacings[{spacing}]</Typography>\\n                </Box>\\n                <Typography variant=\\\"body\\\" sx={{\\n          opacity: \\\"0.7\\\"\\n        }}>\\n                  {spacing} * 8 = {Number(spacing) * 8}px\\n                </Typography>\\n              </Stack>\\n            </Box>)}\\n        </Stack>;\\n}'\n  }\n};\nexport const shadows = args => {\n  return /*#__PURE__*/_jsxs(Grid, {\n    container: true,\n    spacing: 4,\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsx(Stack, {\n        spacing: 5,\n        children: [\"low\", \"medium\", \"intermediate\", \"high\"].map(variant => /*#__PURE__*/_jsxs(Stack, {\n          spacing: 1,\n          children: [/*#__PURE__*/_jsx(Typography, {\n            variant: \"bodySmall\",\n            children: `blackhole--${variant}`\n          }), /*#__PURE__*/_jsx(Box, {\n            height: \"108px\",\n            width: \"90%\",\n            sx: {\n              boxShadow: Tokens.shadows[`blackhole--${variant}`]\n            }\n          })]\n        }))\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsx(Stack, {\n        spacing: 5,\n        children: [\"low\", \"medium\", \"intermediate\", \"high\"].map(variant => /*#__PURE__*/_jsxs(Stack, {\n          spacing: 1,\n          children: [/*#__PURE__*/_jsx(Typography, {\n            variant: \"bodySmall\",\n            children: `cosmos--${variant}`\n          }), /*#__PURE__*/_jsx(Box, {\n            height: \"108px\",\n            width: \"90%\",\n            sx: {\n              boxShadow: Tokens.shadows[`cosmos--${variant}`]\n            }\n          })]\n        }))\n      })\n    })]\n  });\n};\nshadows.storyName = 'Shadows';\nshadows.parameters = {\n  storySource: {\n    source: 'args => {\\n  return <Grid container spacing={4}>\\n          <Grid item xs={6}>\\n            <Stack spacing={5}>\\n              {[\\\"low\\\", \\\"medium\\\", \\\"intermediate\\\", \\\"high\\\"].map(variant => <Stack spacing={1}>\\n                  <Typography variant=\\\"bodySmall\\\">{`blackhole--${variant}`}</Typography>\\n                  <Box height=\\\"108px\\\" width=\\\"90%\\\" sx={{\\n            boxShadow: Tokens.shadows[`blackhole--${variant}`]\\n          }} />\\n                </Stack>)}\\n            </Stack>\\n          </Grid>\\n          <Grid item xs={6}>\\n            <Stack spacing={5}>\\n              {[\\\"low\\\", \\\"medium\\\", \\\"intermediate\\\", \\\"high\\\"].map(variant => <Stack spacing={1}>\\n                  <Typography variant=\\\"bodySmall\\\">{`cosmos--${variant}`}</Typography>\\n                  <Box height=\\\"108px\\\" width=\\\"90%\\\" sx={{\\n            boxShadow: Tokens.shadows[`cosmos--${variant}`]\\n          }} />\\n                </Stack>)}\\n            </Stack>\\n          </Grid>\\n        </Grid>;\\n}'\n  }\n};\nconst componentMeta = {\n  title: 'Tokens',\n  component: Tokens,\n  tags: ['stories-mdx'],\n  includeStories: [\"colors\", \"borderRadius\", \"spacings\", \"shadows\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = { ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;"],"names":[],"sourceRoot":""}