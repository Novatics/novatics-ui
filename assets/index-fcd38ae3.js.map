{"version":3,"file":"index-fcd38ae3.js","sources":["../../../../node_modules/@mui/icons-material/esm/UploadFile.js","../../../../packages/file-upload/src/drag-and-drop/styles.ts","../../../../packages/file-upload/src/drag-and-drop/index.tsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm4 18H6V4h7v5h5v11zM8 15.01l1.41 1.41L11 14.84V19h2v-4.16l1.59 1.59L16 15.01 12.01 11z\"\n}), 'UploadFile');","import { Box, Typography } from '@mui/material';\nimport { styled } from '@novatics-ui/styles';\nimport { Button as NuiButton } from '@novatics-ui/button';\n\nexport const DragAndDropContainer = styled(Box)<{\n  variant?: 'inline' | 'fullscreen';\n  $error?: boolean;\n  $disabled?: boolean;\n  $isHovering?: boolean;\n}>(({ theme, variant, $isHovering, $error, $disabled }) => {\n  const isFullscreen = variant === 'fullscreen';\n\n  const borderColor = (\n    $isHovering\n      ? theme.palette.primary.main\n      : $error\n      ? theme.palette.error.main\n      : $disabled\n      ? theme.palette.grey[20]\n      : theme.palette.grey[50]\n  ).replace('#', '%23');\n  const padding = isFullscreen ? '60px' : '18px 20px';\n  const minWidth = isFullscreen ? '600px' : '450px';\n  const backgroundColor = $isHovering\n    ? theme.palette.primary.light\n    : 'transparent';\n  const iconColor = $isHovering\n    ? theme.palette.primary.main\n    : $disabled\n    ? theme.palette.grey[20]\n    : theme.palette.grey[35];\n  const gridValues = isFullscreen\n    ? {\n        gridTemplateColumns: '1fr',\n        gridTemplateRows: '1fr auto auto auto 1fr',\n        gap: '1.75rem',\n        justifyItems: 'center',\n      }\n    : {\n        gridTemplateColumns: '2rem 1fr auto',\n        gridTemplateRows: 'auto auto',\n        gap: '0 1.125rem',\n      };\n  const iconSize = isFullscreen ? '4rem' : '2rem';\n  const iconGridArea = isFullscreen ? '1 / 1 / 2 / 2' : '1 / 1 / 3 / 2';\n  const cursor = $disabled ? 'not-allowed' : 'unset';\n\n  return {\n    display: 'grid',\n    ...gridValues,\n    alignItems: 'center',\n    borderRadius: '2px',\n    minWidth,\n    padding,\n    cursor,\n    backgroundColor,\n    backgroundImage: `url(\"data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='2' ry='2' stroke='${borderColor}' stroke-width='2' stroke-dasharray='5%2c10' stroke-dashoffset='4' stroke-linecap='round'/%3e%3c/svg%3e\")`,\n    svg: {\n      color: iconColor,\n      width: iconSize,\n      height: iconSize,\n      gridArea: iconGridArea,\n    },\n  };\n});\n\nexport const Title = styled(Typography)<{ $disabled?: boolean }>(\n  ({ theme, $disabled }) => ({\n    color: $disabled ? theme.palette.grey[50] : theme.palette.grey[85],\n  }),\n);\n\nexport const FullscreenFormatContainer = styled(Box)(() => ({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  gap: '4px',\n  marginTop: '2rem',\n}));\n\nexport const ErrorText = styled(Typography)<{\n  $containerVariant?: 'fullscreen' | 'inline';\n}>(({ $containerVariant, theme }) => {\n  const isFullscreen = $containerVariant === 'fullscreen';\n  const gridArea = isFullscreen ? '4 / 1 / 5 / 2' : 'unset';\n  return {\n    color: theme.palette.error.main,\n    gridArea,\n  };\n});\n\nexport const FullscreenFormatHint = styled(Typography)<{ $disabled?: boolean }>(\n  ({ theme, $disabled }) => ({\n    display: 'inline-block',\n    color: $disabled ? theme.palette.grey[20] : theme.palette.grey[50],\n    fontWeight: theme.typography.fontWeightRegular,\n  }),\n);\n\nexport const FullscreenFormats = styled(Typography)<{ $disabled?: boolean }>(\n  ({ theme, $disabled }) => ({\n    color: $disabled ? theme.palette.grey[20] : theme.palette.grey[80],\n  }),\n);\n\nexport const InlineFormatHint = styled(Typography)<{ $disabled?: boolean }>(\n  ({ theme, $disabled }) => ({\n    color: $disabled ? theme.palette.grey[20] : theme.palette.grey[60],\n  }),\n);\n\nexport const Button = styled(NuiButton)<{\n  $containerVariant: 'fullscreen' | 'inline';\n}>(({ $containerVariant }) => {\n  const isFullscreen = $containerVariant === 'fullscreen';\n  const gridArea = isFullscreen ? '3 / 1 / 4 / 2' : '1 / 3 / 3 / 4';\n  return {\n    gridArea,\n  };\n});\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { UploadFile } from '@mui/icons-material';\nimport { ButtonProps } from '@novatics-ui/button';\nimport {\n  Button,\n  DragAndDropContainer,\n  ErrorText,\n  FullscreenFormatContainer,\n  FullscreenFormatHint,\n  FullscreenFormats,\n  InlineFormatHint,\n  Title,\n} from './styles';\nexport interface DragAndDropProps {\n  accept: string;\n  acceptedLabels?: string;\n  onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;\n  onDragEnter?: (event: React.DragEvent<HTMLDivElement>) => void;\n  onDragLeave?: (event: React.DragEvent<HTMLDivElement>) => void;\n  onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void;\n  onDropAccepted?: (event: File[]) => void;\n  onDropRejected?: (event: File[]) => void;\n  onFileDialogCancel?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onFileDialogOpen?: (event: React.MouseEvent<HTMLInputElement>) => void;\n  handleValidation?: (files: File[]) => string | null;\n  disabled?: boolean;\n  title?: string;\n  buttonLabel?: string;\n  acceptedFormatsLabel?: string;\n  uploadIcon?: React.ReactNode;\n  variant?: 'inline' | 'fullscreen';\n  buttonProps?: ButtonProps;\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement>;\n  error?: string;\n  multiple?: boolean;\n}\n\nexport function DragAndDrop(props: DragAndDropProps) {\n  const {\n    onDrop,\n    onDropAccepted,\n    onDropRejected,\n    onDragEnter,\n    onDragOver,\n    onDragLeave,\n    onFileDialogOpen,\n    onFileDialogCancel,\n    handleValidation,\n    accept,\n    error,\n    disabled,\n    title = 'Drag and drop files here',\n    buttonLabel = 'Select files',\n    acceptedFormatsLabel = 'Accepted formats:',\n    acceptedLabels,\n    variant = 'inline',\n    uploadIcon = <UploadFile />,\n    buttonProps,\n    inputProps,\n    multiple,\n  } = props;\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [dragOver, setDragOver] = useState(false);\n  const [errorText, setErrorText] = useState<string>(error || '');\n  const isFullscreen = variant === 'fullscreen';\n\n  useEffect(() => {\n    if (error) setErrorText(error);\n  }, [error]);\n\n  const handleFiles = useCallback(\n    (files: File[]) => {\n      if (handleValidation) {\n        const validationResult = handleValidation(files);\n        if (validationResult) {\n          setErrorText(validationResult);\n          if (onDropRejected) onDropRejected(files);\n          return;\n        }\n      }\n\n      if (onDropAccepted) onDropAccepted(files);\n    },\n    [handleValidation, onDropAccepted, onDropRejected],\n  );\n\n  const handleDrop = useCallback(\n    (e: React.DragEvent<HTMLDivElement>) => {\n      e.preventDefault();\n      if (disabled) return;\n      if (onDrop) onDrop(e);\n      setDragOver(false);\n      handleFiles(Array.from(e.dataTransfer.files));\n    },\n    [onDrop, handleFiles, disabled],\n  );\n\n  const handleDragEnter = useCallback(\n    (e: React.DragEvent<HTMLDivElement>) => {\n      e.preventDefault();\n      if (disabled) return;\n      e.stopPropagation();\n      if (onDragEnter) onDragEnter(e);\n    },\n    [onDragEnter, disabled],\n  );\n\n  const handleDragOver = useCallback(\n    (e: React.DragEvent<HTMLDivElement>) => {\n      e.preventDefault();\n      if (disabled) return;\n      e.stopPropagation();\n      if (onDragOver) onDragOver(e);\n      setDragOver(true);\n    },\n    [onDragOver, disabled],\n  );\n\n  const handleDragLeave = useCallback(\n    (e: React.DragEvent<HTMLDivElement>) => {\n      e.preventDefault();\n      if (disabled) return;\n      e.stopPropagation();\n      if (onDragLeave) onDragLeave(e);\n      setDragOver(false);\n    },\n    [onDragLeave, disabled],\n  );\n\n  const handleButton = () => {\n    if (disabled) return;\n    if (inputRef.current) inputRef.current.click();\n  };\n\n  const handleOpenDialog = (e: React.MouseEvent<HTMLInputElement>) => {\n    if (onFileDialogOpen) onFileDialogOpen(e);\n  };\n\n  const handleInputOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      handleFiles(Array.from(e.target.files));\n    } else {\n      if (onFileDialogCancel) onFileDialogCancel(e);\n    }\n  };\n\n  const formatsHint = () =>\n    isFullscreen ? (\n      <FullscreenFormatContainer>\n        <FullscreenFormatHint variant=\"overline\" $disabled={disabled}>\n          {acceptedFormatsLabel}\n        </FullscreenFormatHint>\n        <FullscreenFormats variant=\"caption\" $disabled={disabled}>\n          {acceptedLabels}\n        </FullscreenFormats>\n      </FullscreenFormatContainer>\n    ) : errorText ? (\n      <ErrorText variant=\"caption\">{errorText}</ErrorText>\n    ) : (\n      <InlineFormatHint variant=\"caption\" $disabled={disabled}>\n        {acceptedFormatsLabel} {acceptedLabels}\n      </InlineFormatHint>\n    );\n\n  return (\n    <DragAndDropContainer\n      variant={variant}\n      onDrop={handleDrop}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      $isHovering={dragOver}\n      $error={Boolean(error)}\n      $disabled={disabled}\n    >\n      <input\n        type=\"file\"\n        accept={accept}\n        multiple={multiple}\n        ref={inputRef}\n        onClick={handleOpenDialog}\n        onChange={handleInputOnChange}\n        style={{ display: 'none' }}\n        {...inputProps}\n      />\n      {uploadIcon}\n      <Title variant={isFullscreen ? 'h5' : 'body'} $disabled={disabled}>\n        {title}\n      </Title>\n      {formatsHint()}\n      {isFullscreen && (\n        <ErrorText $containerVariant={variant} variant=\"caption\">\n          {errorText}\n        </ErrorText>\n      )}\n      <Button\n        onClick={handleButton}\n        color={error ? 'error' : 'primary'}\n        size={isFullscreen ? 'large' : 'small'}\n        variant=\"outlined\"\n        disabled={disabled}\n        $containerVariant={variant}\n        {...buttonProps}\n      >\n        {buttonLabel}\n      </Button>\n    </DragAndDropContainer>\n  );\n}\n"],"names":["UploadFile","createSvgIcon","_jsx","DragAndDropContainer","styled","Box","theme","variant","$isHovering","$error","$disabled","isFullscreen","borderColor","padding","minWidth","backgroundColor","iconColor","gridValues","iconSize","iconGridArea","Title","Typography","FullscreenFormatContainer","ErrorText","$containerVariant","gridArea","FullscreenFormatHint","FullscreenFormats","InlineFormatHint","Button","NuiButton","DragAndDrop","props","onDrop","onDropAccepted","onDropRejected","onDragEnter","onDragOver","onDragLeave","onFileDialogOpen","onFileDialogCancel","handleValidation","accept","error","disabled","title","buttonLabel","acceptedFormatsLabel","acceptedLabels","uploadIcon","jsx","buttonProps","inputProps","multiple","inputRef","useRef","dragOver","setDragOver","useState","errorText","setErrorText","useEffect","handleFiles","useCallback","files","validationResult","handleDrop","e","handleDragEnter","handleDragOver","handleDragLeave","handleButton","handleOpenDialog","handleInputOnChange","formatsHint","jsxs"],"mappings":"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","x_google_ignoreList":[0]}