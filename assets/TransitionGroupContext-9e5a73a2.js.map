{"version":3,"file":"TransitionGroupContext-9e5a73a2.js","sources":["../../../../node_modules/@mui/utils/esm/setRef.js","../../../../node_modules/@mui/utils/esm/useEnhancedEffect.js","../../../../node_modules/@mui/utils/esm/useEventCallback.js","../../../../node_modules/@mui/utils/esm/useForkRef.js","../../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../../node_modules/react-transition-group/esm/TransitionGroupContext.js"],"sourcesContent":["/**\n * TODO v5: consider making it private\n *\n * passes {value} to {ref}\n *\n * WARNING: Be sure to only call this inside a callback that is passed as a ref.\n * Otherwise, make sure to cleanup the previous {ref} if it changes. See\n * https://github.com/mui/material-ui/issues/13539\n *\n * Useful if you want to expose the ref of an inner component to the public API\n * while still using it inside the component.\n * @param ref A ref callback or ref object. If anything falsy, this is a no-op.\n */\nexport default function setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}","import * as React from 'react';\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nexport default useEnhancedEffect;","import * as React from 'react';\nimport useEnhancedEffect from './useEnhancedEffect';\n\n/**\n * https://github.com/facebook/react/issues/14099#issuecomment-440013892\n */\nexport default function useEventCallback(fn) {\n  const ref = React.useRef(fn);\n  useEnhancedEffect(() => {\n    ref.current = fn;\n  });\n  return React.useCallback((...args) =>\n  // @ts-expect-error hide `this`\n  // tslint:disable-next-line:ban-comma-operator\n  (0, ref.current)(...args), []);\n}","import * as React from 'react';\nimport setRef from './setRef';\nexport default function useForkRef(...refs) {\n  /**\n   * This will create a new function if the refs passed to this hook change and are all defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior.\n   */\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return instance => {\n      refs.forEach(ref => {\n        setRef(ref, instance);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react';\nexport default React.createContext(null);"],"names":["setRef","ref","value","useEnhancedEffect","React.useLayoutEffect","React.useEffect","useEnhancedEffect$1","useEventCallback","fn","React.useRef","React.useCallback","args","useForkRef","refs","React.useMemo","instance","_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","key","i","TransitionGroupContext","React"],"mappings":"0CAae,SAASA,EAAOC,EAAKC,EAAO,CACrC,OAAOD,GAAQ,WACjBA,EAAIC,CAAK,EACAD,IACTA,EAAI,QAAUC,EAElB,CClBA,MAAMC,EAAoB,OAAO,OAAW,IAAcC,EAAAA,gBAAwBC,EAAAA,UAClFC,EAAeH,ECIA,SAASI,EAAiBC,EAAI,CAC3C,MAAMP,EAAMQ,SAAaD,CAAE,EAC3BL,OAAAA,EAAkB,IAAM,CACtBF,EAAI,QAAUO,CAClB,CAAG,EACME,EAAAA,YAAkB,IAAIC,OAGzBV,EAAI,SAAS,GAAGU,CAAI,EAAG,CAAE,CAAA,CAC/B,CCbe,SAASC,KAAcC,EAAM,CAM1C,OAAOC,EAAa,QAAC,IACfD,EAAK,MAAMZ,GAAOA,GAAO,IAAI,EACxB,KAEFc,GAAY,CACjBF,EAAK,QAAQZ,GAAO,CAClBD,EAAOC,EAAKc,CAAQ,CAC5B,CAAO,CACP,EAEKF,CAAI,CACT,CCnBe,SAASG,EAA8BC,EAAQC,EAAU,CACtE,GAAID,GAAU,KAAM,MAAO,GAC3B,IAAIE,EAAS,CAAA,EACTC,EAAa,OAAO,KAAKH,CAAM,EAC/BI,EAAKC,EAET,IAAKA,EAAI,EAAGA,EAAIF,EAAW,OAAQE,IACjCD,EAAMD,EAAWE,CAAC,EACd,EAAAJ,EAAS,QAAQG,CAAG,GAAK,KAC7BF,EAAOE,CAAG,EAAIJ,EAAOI,CAAG,GAG1B,OAAOF,CACT,CCZA,MAAAI,EAAeC,EAAM,cAAc,IAAI","x_google_ignoreList":[0,1,2,3,4,5]}