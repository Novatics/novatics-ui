{"version":3,"file":"checkbox-field-src-lib-checkbox-field-stories-mdx.1d0ee653.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AASA;AAAA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AACA;AAGA;AAxCA;AA0CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AAEA;AAAA;AAKA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAOA;AAHA;AAEA;AAEA;AAIA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AAvCA;AAyCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACluBA;AAGA;AACA;AACA;;AASA;AAAA;AAQA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AA7BA;AAgCA","sources":["webpack://novatics/./packages/checkbox/src/index.ts","webpack://novatics/./packages/checkbox-field/src/lib/checkbox-field.tsx","webpack://novatics/./packages/checkbox-field/src/lib/checkbox-formik-field.tsx","webpack://novatics/./packages/checkbox-field/src/lib/checkbox-field.stories.mdx","webpack://novatics/./packages/checkbox/src/lib/checkbox.tsx"],"sourcesContent":["export * from './lib/checkbox';\nexport { Checkbox as default } from './lib/checkbox';\n","import Checkbox, { CheckboxProps } from '@novatics/checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport { styled, useTheme } from '@mui/material';\nimport { TypographyProps } from '@mui/material/Typography';\nimport MuiFormControlLabel, {\n  FormControlLabelProps,\n} from '@mui/material/FormControlLabel';\n\nconst FormControlLabel = styled(MuiFormControlLabel)(({ theme }) => ({\n  paddingTop: theme.spacing(1),\n  paddingBottom: theme.spacing(1),\n  '&.MuiFormControlLabel-root': {\n    margin: 0,\n  },\n}));\n\nexport type CheckboxFieldProps = FormControlLabelProps &\n  CheckboxProps & {\n    typography: Extract<TypographyProps['variant'], 'bodySmall' | 'body'>;\n    error?: string | boolean;\n    hint?: string;\n  };\n\nconst CheckboxField = (props: CheckboxFieldProps) => {\n  const theme = useTheme();\n\n  const typographyVariant = props.typography as TypographyProps['variant'];\n  const typographyOverride = typographyVariant\n    ? theme.typography[typographyVariant]\n    : undefined;\n\n  const hasError = Boolean(props.error);\n  const color = hasError ? 'error' : undefined;\n  const labelPadding = {\n    paddingRight: theme.spacing(0.5),\n    paddingLeft: theme.spacing(0.5),\n  };\n\n  if (props.required) {\n    if (props.labelPlacement === 'start') {\n      labelPadding.paddingLeft = '0px';\n    } else {\n      labelPadding.paddingRight = '0px';\n    }\n  }\n\n  return (\n    <FormControl>\n      <FormControlLabel\n        {...props}\n        control={<Checkbox color={color} {...props} />}\n        slotProps={{\n          ...props.slotProps,\n          typography: {\n            color: hasError ? theme.palette.error.main : undefined,\n            ...typographyOverride,\n            ...labelPadding,\n            ...props.slotProps?.typography,\n          },\n        }}\n      />\n    </FormControl>\n  );\n};\n\nexport { CheckboxField };\nexport default CheckboxField;\n","import { useCallback, useMemo } from 'react';\nimport { Field, FieldProps } from 'formik';\n\nimport { CheckboxField, CheckboxFieldProps } from './checkbox-field';\n\nexport type CheckboxFormikFieldProps<T, U> = CheckboxFieldProps &\n  FieldProps<T, U>;\n\nconst CheckboxFormikField = <T, U>(props: CheckboxFormikFieldProps<T, U>) => {\n  const internalValidate = useCallback(\n    (value) => (props.required ? !value : false),\n    [props.required]\n  );\n\n  const label = useMemo(\n    () => (props.label ? props.label : props.name),\n    [props.label, props.name]\n  );\n\n  return (\n    <Field validate={internalValidate} {...props}>\n      {({\n        field,\n\n        form,\n\n        meta,\n      }: FieldProps<boolean>) => {\n        const hasError =\n          (form.touched || meta.touched) &&\n          (meta.error || Boolean(form.errors[field.name]));\n\n        return (\n          <CheckboxField\n            error={hasError}\n            {...props}\n            label={label}\n            value={field.value}\n            onChange={(event, value) => {\n              field.onChange(event);\n              props.onChange && props.onChange(event, value);\n            }}\n          />\n        );\n      }}\n    </Field>\n  );\n};\n\nexport { CheckboxFormikField };\nexport default CheckboxFormikField;\n","\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"@storybook/addon-essentials/docs/mdx-react-shim\";\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs/blocks';\nimport { ComponentStory, ComponentMeta } from '@storybook/react';\nimport { Formik, Field, Form } from 'formik';\nimport { Button, Grid, Stack, Typography } from '@mui/material';\nimport CheckboxField from './checkbox-field';\nimport CheckboxFormikField from './checkbox-formik-field';\nimport pkg from '../../package.json';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, { ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {})\n  }) : _createMdxContent();\n\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      h3: \"h3\",\n      p: \"p\",\n      code: \"code\",\n      pre: \"pre\",\n      a: \"a\",\n      ul: \"ul\",\n      li: \"li\",\n      div: \"div\"\n    }, _provideComponents(), props.components);\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Meta, {\n        title: \"CheckboxField\",\n        component: CheckboxField\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.h1, {\n        id: \"checkboxfield-\",\n        children: [\"CheckboxField \", /*#__PURE__*/_jsx(\"img\", {\n          src: `https://img.shields.io/badge/Version-v${pkg.version}-brightgreenn`\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"installation\",\n        children: \"Installation\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n        children: [\"First install the latest version of the package from \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"@novatics/checkbox-field\"\n        }), \".\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-shell\",\n          children: \"  yarn add -D @novatics/checkbox-field\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-shell\",\n          children: \"  npm install --dev @novatics/checkbox-field\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"and use it\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-tsx\",\n          children: \"import ... from '@novatics/checkbox-field';\\n\\n  ...\\n\\n\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"dependencies\",\n        children: \"Dependencies\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n        children: [\"This component extends \", /*#__PURE__*/_jsx(_components.a, {\n          href: \"https://mui.com/material-ui/react-checkbox/\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Material UI React Checkbox\"\n        }), \". Therefore is needed to install Material UI:\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"yarn add @mui/material\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"basic-usage\",\n        children: \"Basic Usage\"\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Basic Usage\",\n          children: /*#__PURE__*/_jsxs(Stack, {\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"h6\",\n              children: \"All states and variants\"\n            }), /*#__PURE__*/_jsxs(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xxs: 2,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 0,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"bodySmall\",\n                    children: \"Default\"\n                  }), /*#__PURE__*/_jsx(CheckboxField, {}), /*#__PURE__*/_jsx(CheckboxField, {\n                    checked: true\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    disabled: true\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    checked: true,\n                    disabled: true\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    color: \"error\"\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xxs: 2,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 0,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"bodySmall\",\n                    children: \"Outlined\"\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    variant: \"outlined\"\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    variant: \"outlined\",\n                    checked: true\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    variant: \"outlined\",\n                    checked: true,\n                    disabled: true\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xxs: 2,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 0,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"bodySmall\",\n                    children: \"Indeterminate Default\"\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    indeterminate: true\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    indeterminate: true,\n                    disabled: true\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xxs: 2,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 0,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"bodySmall\",\n                    children: \"Indeterminate Outlined\"\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    variant: \"outlined\",\n                    indeterminate: true\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    variant: \"outlined\",\n                    indeterminate: true,\n                    disabled: true\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xxs: 2,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 0,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"bodySmall\",\n                    children: \"Color Variations\"\n                  }), /*#__PURE__*/_jsxs(Stack, {\n                    direction: \"row\",\n                    spacing: 0,\n                    children: [/*#__PURE__*/_jsx(CheckboxField, {\n                      color: \"primary\",\n                      checked: true\n                    }), /*#__PURE__*/_jsx(CheckboxField, {\n                      color: \"primary\"\n                    })]\n                  }), /*#__PURE__*/_jsxs(Stack, {\n                    direction: \"row\",\n                    spacing: 0,\n                    children: [/*#__PURE__*/_jsx(CheckboxField, {\n                      color: \"secondary\",\n                      checked: true\n                    }), /*#__PURE__*/_jsx(CheckboxField, {\n                      color: \"secondary\"\n                    })]\n                  }), /*#__PURE__*/_jsxs(Stack, {\n                    direction: \"row\",\n                    spacing: 0,\n                    children: [/*#__PURE__*/_jsx(CheckboxField, {\n                      color: \"error\",\n                      checked: true\n                    }), /*#__PURE__*/_jsx(CheckboxField, {\n                      color: \"error\"\n                    })]\n                  }), /*#__PURE__*/_jsxs(Stack, {\n                    direction: \"row\",\n                    spacing: 0,\n                    children: [/*#__PURE__*/_jsx(CheckboxField, {\n                      color: \"info\",\n                      checked: true\n                    }), /*#__PURE__*/_jsx(CheckboxField, {\n                      color: \"info\"\n                    })]\n                  }), /*#__PURE__*/_jsxs(Stack, {\n                    direction: \"row\",\n                    spacing: 0,\n                    children: [/*#__PURE__*/_jsx(CheckboxField, {\n                      color: \"success\",\n                      checked: true\n                    }), /*#__PURE__*/_jsx(CheckboxField, {\n                      color: \"success\"\n                    })]\n                  }), /*#__PURE__*/_jsxs(Stack, {\n                    direction: \"row\",\n                    spacing: 0,\n                    children: [/*#__PURE__*/_jsx(CheckboxField, {\n                      color: \"warning\",\n                      checked: true\n                    }), /*#__PURE__*/_jsx(CheckboxField, {\n                      color: \"warning\"\n                    })]\n                  })]\n                })\n              })]\n            }), /*#__PURE__*/_jsx(Typography, {\n              variant: \"h6\",\n              children: \"Labels\"\n            }), /*#__PURE__*/_jsxs(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xxs: 2,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 0,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"bodySmall\",\n                    children: \"Default(end)\"\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    label: \"label\",\n                    labelPlacement: \"end\"\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xxs: 2,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 0,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"bodySmall\",\n                    children: \"Start\"\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    label: \"label\",\n                    labelPlacement: \"start\"\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xxs: 2,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 0,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"bodySmall\",\n                    children: \"Top\"\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    label: \"label\",\n                    labelPlacement: \"top\"\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xxs: 2,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 0,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"bodySmall\",\n                    children: \"Bottom\"\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    label: \"label\",\n                    labelPlacement: \"bottom\"\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xxs: 2,\n                children: /*#__PURE__*/_jsxs(Stack, {\n                  spacing: 0,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"bodySmall\",\n                    children: \"Required\"\n                  }), /*#__PURE__*/_jsx(CheckboxField, {\n                    label: \"label\",\n                    required: true\n                  })]\n                })\n              })]\n            })]\n          })\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"using-formik\",\n        children: \"Using Formik\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n        children: [\"We also provide a integrated component using \", /*#__PURE__*/_jsx(_components.a, {\n          href: \"https://formik.org/docs/api/field\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Field\"\n        }), \" from Formik!\\nSome default behaviors of our component are:\"]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n        children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: \"Automatic label using field name. If you want to replace or hide the label you can use the label property.\"\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: \"Autimatic validation if the field is required (html5 ).\"\n        }), \"\\n\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Using Formik\",\n          children: args => {\n            return /*#__PURE__*/_jsx(Stack, {\n              direction: \"row\",\n              spacing: 0,\n              children: /*#__PURE__*/_jsx(Formik, {\n                initialValues: {\n                  isChecked: false,\n                  required: false,\n                  toggle: false,\n                  checked: []\n                },\n                onSubmit: async values => {\n                  await new Promise(r => setTimeout(r, 500));\n                  alert(JSON.stringify(values, null, 2));\n                },\n                children: ({\n                  values,\n                  validateForm\n                }) => /*#__PURE__*/_jsx(Form, {\n                  children: /*#__PURE__*/_jsxs(Stack, {\n                    children: [/*#__PURE__*/_jsx(CheckboxFormikField, {\n                      id: \"isChecked\",\n                      name: \"isChecked\"\n                    }), /*#__PURE__*/_jsx(CheckboxFormikField, {\n                      id: \"toggle\",\n                      name: \"toggle\",\n                      label: `${values.toggle}`,\n                      validate: val => !val\n                    }), /*#__PURE__*/_jsx(CheckboxFormikField, {\n                      type: \"checkbox\",\n                      name: \"required\",\n                      label: \"Required\",\n                      required: true\n                    }), /*#__PURE__*/_jsxs(_components.div, {\n                      role: \"group\",\n                      \"aria-labelledby\": \"checkbox-group\",\n                      children: [/*#__PURE__*/_jsx(CheckboxFormikField, {\n                        type: \"checkbox\",\n                        name: \"checked\",\n                        value: \"One\",\n                        label: \"One\"\n                      }), /*#__PURE__*/_jsx(CheckboxFormikField, {\n                        type: \"checkbox\",\n                        name: \"checked\",\n                        value: \"Two\",\n                        label: \"Two\"\n                      }), /*#__PURE__*/_jsx(CheckboxFormikField, {\n                        type: \"checkbox\",\n                        name: \"checked\",\n                        value: \"Three\",\n                        label: \"Three\"\n                      })]\n                    }), /*#__PURE__*/_jsxs(Stack, {\n                      direction: \"row\",\n                      spacing: 1,\n                      children: [/*#__PURE__*/_jsx(Button, {\n                        variant: \"outlined\",\n                        onClick: () => validateForm().then(() => console.log('blah')),\n                        children: \"Validate\"\n                      }), /*#__PURE__*/_jsx(Button, {\n                        variant: \"contained\",\n                        type: \"submit\",\n                        children: \"Submit\"\n                      })]\n                    })]\n                  })\n                })\n              })\n            });\n          }\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Playground\",\n          argTypes: {\n            error: false,\n            checked: false\n          },\n          children: args => {\n            return /*#__PURE__*/_jsx(_components.div, {\n              children: /*#__PURE__*/_jsx(CheckboxField, { ...args\n              })\n            });\n          }\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(ArgsTable, {\n        story: \"Playground\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"made by Novatics ❤\"\n      })]\n    });\n  }\n}\n/* ========= */\n\n\nexport const basicUsage = () => /*#__PURE__*/_jsxs(Stack, {\n  children: [/*#__PURE__*/_jsx(Typography, {\n    variant: \"h6\",\n    children: \"All states and variants\"\n  }), /*#__PURE__*/_jsxs(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xxs: 2,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 0,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"bodySmall\",\n          children: \"Default\"\n        }), /*#__PURE__*/_jsx(CheckboxField, {}), /*#__PURE__*/_jsx(CheckboxField, {\n          checked: true\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          disabled: true\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          checked: true,\n          disabled: true\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          color: \"error\"\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xxs: 2,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 0,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"bodySmall\",\n          children: \"Outlined\"\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          variant: \"outlined\"\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          variant: \"outlined\",\n          checked: true\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          variant: \"outlined\",\n          checked: true,\n          disabled: true\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xxs: 2,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 0,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"bodySmall\",\n          children: \"Indeterminate Default\"\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          indeterminate: true\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          indeterminate: true,\n          disabled: true\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xxs: 2,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 0,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"bodySmall\",\n          children: \"Indeterminate Outlined\"\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          variant: \"outlined\",\n          indeterminate: true\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          variant: \"outlined\",\n          indeterminate: true,\n          disabled: true\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xxs: 2,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 0,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"bodySmall\",\n          children: \"Color Variations\"\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"row\",\n          spacing: 0,\n          children: [/*#__PURE__*/_jsx(CheckboxField, {\n            color: \"primary\",\n            checked: true\n          }), /*#__PURE__*/_jsx(CheckboxField, {\n            color: \"primary\"\n          })]\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"row\",\n          spacing: 0,\n          children: [/*#__PURE__*/_jsx(CheckboxField, {\n            color: \"secondary\",\n            checked: true\n          }), /*#__PURE__*/_jsx(CheckboxField, {\n            color: \"secondary\"\n          })]\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"row\",\n          spacing: 0,\n          children: [/*#__PURE__*/_jsx(CheckboxField, {\n            color: \"error\",\n            checked: true\n          }), /*#__PURE__*/_jsx(CheckboxField, {\n            color: \"error\"\n          })]\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"row\",\n          spacing: 0,\n          children: [/*#__PURE__*/_jsx(CheckboxField, {\n            color: \"info\",\n            checked: true\n          }), /*#__PURE__*/_jsx(CheckboxField, {\n            color: \"info\"\n          })]\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"row\",\n          spacing: 0,\n          children: [/*#__PURE__*/_jsx(CheckboxField, {\n            color: \"success\",\n            checked: true\n          }), /*#__PURE__*/_jsx(CheckboxField, {\n            color: \"success\"\n          })]\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"row\",\n          spacing: 0,\n          children: [/*#__PURE__*/_jsx(CheckboxField, {\n            color: \"warning\",\n            checked: true\n          }), /*#__PURE__*/_jsx(CheckboxField, {\n            color: \"warning\"\n          })]\n        })]\n      })\n    })]\n  }), /*#__PURE__*/_jsx(Typography, {\n    variant: \"h6\",\n    children: \"Labels\"\n  }), /*#__PURE__*/_jsxs(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xxs: 2,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 0,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"bodySmall\",\n          children: \"Default(end)\"\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          label: \"label\",\n          labelPlacement: \"end\"\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xxs: 2,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 0,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"bodySmall\",\n          children: \"Start\"\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          label: \"label\",\n          labelPlacement: \"start\"\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xxs: 2,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 0,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"bodySmall\",\n          children: \"Top\"\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          label: \"label\",\n          labelPlacement: \"top\"\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xxs: 2,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 0,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"bodySmall\",\n          children: \"Bottom\"\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          label: \"label\",\n          labelPlacement: \"bottom\"\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xxs: 2,\n      children: /*#__PURE__*/_jsxs(Stack, {\n        spacing: 0,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"bodySmall\",\n          children: \"Required\"\n        }), /*#__PURE__*/_jsx(CheckboxField, {\n          label: \"label\",\n          required: true\n        })]\n      })\n    })]\n  })]\n});\nbasicUsage.storyName = 'Basic Usage';\nbasicUsage.parameters = {\n  storySource: {\n    source: '<Stack><Typography variant=\\\"h6\\\">{\\\"All states and variants\\\"}</Typography><Grid container spacing={2}><Grid item xxs={2}><Stack spacing={0}><Typography variant=\\\"bodySmall\\\">{\\\"Default\\\"}</Typography><CheckboxField /><CheckboxField checked /><CheckboxField disabled /><CheckboxField checked disabled /><CheckboxField color=\\\"error\\\" /></Stack></Grid><Grid item xxs={2}><Stack spacing={0}><Typography variant=\\\"bodySmall\\\">{\\\"Outlined\\\"}</Typography><CheckboxField variant=\\\"outlined\\\" /><CheckboxField variant=\\\"outlined\\\" checked /><CheckboxField variant=\\\"outlined\\\" checked disabled /></Stack></Grid><Grid item xxs={2}><Stack spacing={0}><Typography variant=\\\"bodySmall\\\">{\\\"Indeterminate Default\\\"}</Typography><CheckboxField indeterminate /><CheckboxField indeterminate disabled /></Stack></Grid><Grid item xxs={2}><Stack spacing={0}><Typography variant=\\\"bodySmall\\\">{\\\"Indeterminate Outlined\\\"}</Typography><CheckboxField variant=\\\"outlined\\\" indeterminate /><CheckboxField variant=\\\"outlined\\\" indeterminate disabled /></Stack></Grid><Grid item xxs={2}><Stack spacing={0}><Typography variant=\\\"bodySmall\\\">{\\\"Color Variations\\\"}</Typography><Stack direction=\\\"row\\\" spacing={0}><CheckboxField color=\\\"primary\\\" checked /><CheckboxField color=\\\"primary\\\" /></Stack><Stack direction=\\\"row\\\" spacing={0}><CheckboxField color=\\\"secondary\\\" checked /><CheckboxField color=\\\"secondary\\\" /></Stack><Stack direction=\\\"row\\\" spacing={0}><CheckboxField color=\\\"error\\\" checked /><CheckboxField color=\\\"error\\\" /></Stack><Stack direction=\\\"row\\\" spacing={0}><CheckboxField color=\\\"info\\\" checked /><CheckboxField color=\\\"info\\\" /></Stack><Stack direction=\\\"row\\\" spacing={0}><CheckboxField color=\\\"success\\\" checked /><CheckboxField color=\\\"success\\\" /></Stack><Stack direction=\\\"row\\\" spacing={0}><CheckboxField color=\\\"warning\\\" checked /><CheckboxField color=\\\"warning\\\" /></Stack></Stack></Grid></Grid><Typography variant=\\\"h6\\\">{\\\"Labels\\\"}</Typography><Grid container spacing={2}><Grid item xxs={2}><Stack spacing={0}><Typography variant=\\\"bodySmall\\\">{\\\"Default(end)\\\"}</Typography><CheckboxField label=\\\"label\\\" labelPlacement=\\\"end\\\" /></Stack></Grid><Grid item xxs={2}><Stack spacing={0}><Typography variant=\\\"bodySmall\\\">{\\\"Start\\\"}</Typography><CheckboxField label=\\\"label\\\" labelPlacement=\\\"start\\\" /></Stack></Grid><Grid item xxs={2}><Stack spacing={0}><Typography variant=\\\"bodySmall\\\">{\\\"Top\\\"}</Typography><CheckboxField label=\\\"label\\\" labelPlacement=\\\"top\\\" /></Stack></Grid><Grid item xxs={2}><Stack spacing={0}><Typography variant=\\\"bodySmall\\\">{\\\"Bottom\\\"}</Typography><CheckboxField label=\\\"label\\\" labelPlacement=\\\"bottom\\\" /></Stack></Grid><Grid item xxs={2}><Stack spacing={0}><Typography variant=\\\"bodySmall\\\">{\\\"Required\\\"}</Typography><CheckboxField label=\\\"label\\\" required /></Stack></Grid></Grid></Stack>'\n  }\n};\nexport const usingFormik = args => {\n  return /*#__PURE__*/_jsx(Stack, {\n    direction: \"row\",\n    spacing: 0,\n    children: /*#__PURE__*/_jsx(Formik, {\n      initialValues: {\n        isChecked: false,\n        required: false,\n        toggle: false,\n        checked: []\n      },\n      onSubmit: async values => {\n        await new Promise(r => setTimeout(r, 500));\n        alert(JSON.stringify(values, null, 2));\n      },\n      children: ({\n        values,\n        validateForm\n      }) => /*#__PURE__*/_jsx(Form, {\n        children: /*#__PURE__*/_jsxs(Stack, {\n          children: [/*#__PURE__*/_jsx(CheckboxFormikField, {\n            id: \"isChecked\",\n            name: \"isChecked\"\n          }), /*#__PURE__*/_jsx(CheckboxFormikField, {\n            id: \"toggle\",\n            name: \"toggle\",\n            label: `${values.toggle}`,\n            validate: val => !val\n          }), /*#__PURE__*/_jsx(CheckboxFormikField, {\n            type: \"checkbox\",\n            name: \"required\",\n            label: \"Required\",\n            required: true\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            role: \"group\",\n            \"aria-labelledby\": \"checkbox-group\",\n            children: [/*#__PURE__*/_jsx(CheckboxFormikField, {\n              type: \"checkbox\",\n              name: \"checked\",\n              value: \"One\",\n              label: \"One\"\n            }), /*#__PURE__*/_jsx(CheckboxFormikField, {\n              type: \"checkbox\",\n              name: \"checked\",\n              value: \"Two\",\n              label: \"Two\"\n            }), /*#__PURE__*/_jsx(CheckboxFormikField, {\n              type: \"checkbox\",\n              name: \"checked\",\n              value: \"Three\",\n              label: \"Three\"\n            })]\n          }), /*#__PURE__*/_jsxs(Stack, {\n            direction: \"row\",\n            spacing: 1,\n            children: [/*#__PURE__*/_jsx(Button, {\n              variant: \"outlined\",\n              onClick: () => validateForm().then(() => console.log(\"blah\")),\n              children: \"Validate\"\n            }), /*#__PURE__*/_jsx(Button, {\n              variant: \"contained\",\n              type: \"submit\",\n              children: \"Submit\"\n            })]\n          })]\n        })\n      })\n    })\n  });\n};\nusingFormik.storyName = 'Using Formik';\nusingFormik.parameters = {\n  storySource: {\n    source: 'args => {\\n  return <Stack direction=\\\"row\\\" spacing={0}>\\n          <Formik initialValues={{\\n      isChecked: false,\\n      required: false,\\n      toggle: false,\\n      checked: []\\n    }} onSubmit={async values => {\\n      await new Promise(r => setTimeout(r, 500));\\n      alert(JSON.stringify(values, null, 2));\\n    }}>\\n            {({\\n        values,\\n        validateForm\\n      }) => <Form>\\n                <Stack>\\n                  <CheckboxFormikField id=\\\"isChecked\\\" name=\\\"isChecked\\\" />\\n                  <CheckboxFormikField id=\\\"toggle\\\" name=\\\"toggle\\\" label={`${values.toggle}`} validate={val => !val} />\\n                  <CheckboxFormikField type=\\\"checkbox\\\" name=\\\"required\\\" label=\\\"Required\\\" required />\\n                  <div role=\\\"group\\\" aria-labelledby=\\\"checkbox-group\\\">\\n                    <CheckboxFormikField type=\\\"checkbox\\\" name=\\\"checked\\\" value=\\\"One\\\" label=\\\"One\\\" />\\n                    <CheckboxFormikField type=\\\"checkbox\\\" name=\\\"checked\\\" value=\\\"Two\\\" label=\\\"Two\\\" />\\n                    <CheckboxFormikField type=\\\"checkbox\\\" name=\\\"checked\\\" value=\\\"Three\\\" label=\\\"Three\\\" />\\n                  </div>\\n                  <Stack direction=\\\"row\\\" spacing={1}>\\n                    <Button variant=\\\"outlined\\\" onClick={() => validateForm().then(() => console.log(\\\"blah\\\"))}>\\n                      Validate\\n                    </Button>\\n                    <Button variant=\\\"contained\\\" type=\\\"submit\\\">\\n                      Submit\\n                    </Button>\\n                  </Stack>\\n                </Stack>\\n              </Form>}\\n          </Formik>\\n        </Stack>;\\n}'\n  }\n};\nexport const playground = args => {\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: /*#__PURE__*/_jsx(CheckboxField, { ...args\n    })\n  });\n};\nplayground.storyName = 'Playground';\nplayground.argTypes = {\n  error: false,\n  checked: false\n};\nplayground.parameters = {\n  storySource: {\n    source: 'args => {\\n  return <div>\\n          <CheckboxField {...args} />\\n        </div>;\\n}'\n  }\n};\nconst componentMeta = {\n  title: 'CheckboxField',\n  component: CheckboxField,\n  tags: ['stories-mdx'],\n  includeStories: [\"basicUsage\", \"usingFormik\", \"playground\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = { ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;","import MuiCheckbox, {\n  CheckboxProps as MuiCheckboxProps,\n} from '@mui/material/Checkbox';\nimport CheckIcon from '@mui/icons-material/Check';\nimport { styled } from '@novatics/styles';\nimport { useMemo } from 'react';\n\ntype PropsToOmit =\n  | 'disableFocusRipple'\n  | 'centerRipple'\n  | 'disableTouchRipple'\n  | 'focusRipple'\n  | 'TouchRippleProps'\n  | 'touchRippleRef';\n// TODO: How should default Color be handled?\ntype Color = 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning';\n\nexport interface CheckboxProps extends Omit<MuiCheckboxProps, PropsToOmit> {\n  variant: 'filled' | 'outlined';\n  color?: Color;\n}\n\nconst IndeterminateIcon = styled('span')<{\n  colorType: Color;\n  variant: 'filled' | 'outlined';\n  disabled?: boolean;\n}>(({ colorType, theme: { palette }, variant, disabled }) => {\n  const isFilled = variant === 'filled';\n  const colorVariant = palette[colorType];\n  const backgroundColor = disabled\n    ? palette.grey[20]\n    : isFilled\n    ? colorVariant.main\n    : 'transparent';\n\n  const borderColor = disabled ? palette.grey[20] : colorVariant.main;\n  return {\n    width: 14,\n    height: 14,\n    backgroundColor: backgroundColor,\n    borderRadius: '2px',\n    border: `2px solid ${borderColor}`,\n    '&:before': {\n      // center content to create line in the middle\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      display: 'block',\n      width: 8.89,\n      height: 1.78,\n      content: '\"\"',\n      backgroundColor: isFilled ? palette.grey[0] : colorVariant.main,\n    },\n\n    'input:hover:not([disabled]) ~ &': {\n      backgroundColor: isFilled ? colorVariant.dark : colorVariant.light,\n      borderColor: colorVariant.dark,\n\n      '&:before': {\n        backgroundColor: isFilled ? palette.grey[0] : colorVariant.medium,\n      },\n    },\n\n    'input:disabled ~ &': {\n      backgroundColor: isFilled ? palette.grey[20] : 'transparent',\n      border: `2px solid ${palette.grey[20]}`,\n\n      '&:before': {\n        backgroundColor: isFilled ? palette.grey[0] : palette.grey[20],\n      },\n    },\n  };\n});\n\nconst UncheckedIcon = styled(CheckIcon)<{\n  colorType: Color;\n  error?: boolean;\n  disabled?: boolean;\n}>(({ colorType, theme: { palette }, error, disabled }) => {\n  const borderColor = error\n    ? palette.error.main\n    : disabled\n    ? palette.grey[20]\n    : palette.grey[35];\n  return {\n    width: 14,\n    height: 14,\n    borderRadius: '2px',\n    border: `2px solid ${borderColor}`,\n    // Set color of the check icon\n    color: 'transparent',\n    'input:hover:not([disabled]) ~ &': {\n      backgroundColor: palette[colorType].light,\n      borderColor: palette[colorType].dark,\n      // Set color of the check icon\n      color: palette[colorType].medium || palette[colorType].dark,\n    },\n  };\n});\n\nconst CheckedIcon = styled(UncheckedIcon)<{\n  colorType: Color;\n  variant: 'filled' | 'outlined';\n  disabled?: boolean;\n}>(({ colorType, theme: { palette }, variant, disabled }) => {\n  const isFilled = variant === 'filled';\n\n  const colors = useMemo(() => {\n    if (disabled && !isFilled) {\n      return {\n        color: palette.grey[20],\n        borderColor: palette.grey[20],\n        backgroundColor: palette.grey[0],\n      };\n    }\n    if (disabled && isFilled) {\n      return {\n        color: palette.grey[0],\n        borderColor: palette.grey[20],\n        backgroundColor: palette.grey[20],\n      };\n    }\n    if (isFilled) {\n      return {\n        color: palette.grey[0],\n        borderColor: palette[colorType].main,\n        backgroundColor: palette[colorType].main,\n      };\n    }\n    return {\n      color: palette[colorType].main,\n      borderColor: palette[colorType].main,\n      backgroundColor: palette.grey[0],\n    };\n  }, [colorType, disabled, isFilled, palette]);\n\n  return {\n    color: colors.color,\n    backgroundColor: colors.backgroundColor,\n    borderColor: colors.borderColor,\n\n    'input:hover:not([disabled]) ~ &': {\n      color: colors.color,\n      backgroundColor: colors.backgroundColor,\n      borderColor: colors.borderColor,\n    },\n  };\n});\n\n// TODO: How could we make it more customizable regarding adding new colors?\nexport const Checkbox = ({\n  variant = 'filled',\n  color = 'primary',\n  disabled,\n  ...other\n}: CheckboxProps) => (\n  <MuiCheckbox\n    disableFocusRipple\n    disableRipple\n    disableTouchRipple\n    disabled={disabled}\n    icon={\n      <UncheckedIcon\n        colorType={color}\n        error={color === 'error'}\n        disabled={disabled}\n      />\n    }\n    checkedIcon={\n      <CheckedIcon colorType={color} variant={variant} disabled={disabled} />\n    }\n    indeterminateIcon={\n      <IndeterminateIcon\n        colorType={color}\n        variant={variant}\n        disabled={disabled}\n      />\n    }\n    {...other}\n  />\n);\n\nexport default Checkbox;\n"],"names":[],"sourceRoot":""}