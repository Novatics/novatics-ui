import{j as s}from"./jsx-runtime-d079401a.js";import{d as B}from"./Check-92775e68.js";import"./fonts-0fc9e249.js";import{s as f}from"./styled-b40b467a.js";import{r as l}from"./index-f1f2c4b1.js";import{h as x,c as i,e as R,f as j,g as q}from"./useThemeProps-09ff92e7.js";import{g as E,a as T,s as z,r as F,b as H,d as M}from"./styled-f4c85dcf.js";import{S}from"./SwitchBase-fa07e534.js";import{c as h}from"./createSvgIcon-2a61c0ab.js";const L=h(s.jsx("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"}),"CheckBoxOutlineBlank"),N=h(s.jsx("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckBox"),P=h(s.jsx("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"}),"IndeterminateCheckBox");function A(o){return T("MuiCheckbox",o)}const W=E("MuiCheckbox",["root","checked","disabled","indeterminate","colorPrimary","colorSecondary"]),m=W,U=["checkedIcon","color","icon","indeterminate","indeterminateIcon","inputProps","size","className"],G=o=>{const{classes:e,indeterminate:n,color:a}=o,t={root:["root",n&&"indeterminate",`color${x(a)}`]},r=M(t,A,e);return i({},e,r)},O=z(S,{shouldForwardProp:o=>F(o)||o==="classes",name:"MuiCheckbox",slot:"Root",overridesResolver:(o,e)=>{const{ownerState:n}=o;return[e.root,n.indeterminate&&e.indeterminate,n.color!=="default"&&e[`color${x(n.color)}`]]}})(({theme:o,ownerState:e})=>i({color:(o.vars||o).palette.text.secondary},!e.disableRipple&&{"&:hover":{backgroundColor:o.vars?`rgba(${e.color==="default"?o.vars.palette.action.activeChannel:o.vars.palette.primary.mainChannel} / ${o.vars.palette.action.hoverOpacity})`:R(e.color==="default"?o.palette.action.active:o.palette[e.color].main,o.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},e.color!=="default"&&{[`&.${m.checked}, &.${m.indeterminate}`]:{color:(o.vars||o).palette[e.color].main},[`&.${m.disabled}`]:{color:(o.vars||o).palette.action.disabled}})),D=s.jsx(N,{}),J=s.jsx(L,{}),K=s.jsx(P,{}),Q=l.forwardRef(function(e,n){var a,t;const r=j({props:e,name:"MuiCheckbox"}),{checkedIcon:d=D,color:u="primary",icon:V=J,indeterminate:c=!1,indeterminateIcon:b=K,inputProps:_,size:p="medium",className:w}=r,$=q(r,U),C=c?b:V,k=c?b:d,y=i({},r,{color:u,indeterminate:c,size:p}),g=G(y);return s.jsx(O,i({type:"checkbox",inputProps:i({"data-indeterminate":c},_),icon:l.cloneElement(C,{fontSize:(a=C.props.fontSize)!=null?a:p}),checkedIcon:l.cloneElement(k,{fontSize:(t=k.props.fontSize)!=null?t:p}),ownerState:y,ref:n,className:H(g.root,w)},$,{classes:g}))}),X=Q,Y=f("span")(({colorType:o,theme:{palette:e},variant:n,disabled:a})=>{const t=n==="filled",r=e[o],d=a?e.grey[20]:t?r.main:"transparent",u=a?e.grey[20]:r.main;return{width:14,height:14,backgroundColor:d,borderRadius:"2px",border:`2px solid ${u}`,"&:before":{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",display:"block",width:8.89,height:1.78,content:'""',backgroundColor:t?e.grey[0]:r.main},"input:hover:not([disabled]) ~ &":{backgroundColor:t?r.dark:r.light,borderColor:r.dark,"&:before":{backgroundColor:t?e.grey[0]:r.medium}},"input:disabled ~ &":{backgroundColor:t?e.grey[20]:"transparent",border:`2px solid ${e.grey[20]}`,"&:before":{backgroundColor:t?e.grey[0]:e.grey[20]}}}}),I=f(B)(({colorType:o,theme:{palette:e},error:n,disabled:a})=>({width:14,height:14,borderRadius:"2px",border:`2px solid ${n?e.error.main:a?e.grey[20]:e.grey[35]}`,color:"transparent","input:hover:not([disabled]) ~ &":{backgroundColor:e[o].light,borderColor:e[o].dark,color:e[o].medium||e[o].dark}})),Z=f(I)(({colorType:o,theme:{palette:e},variant:n,disabled:a})=>{const t=n==="filled",r=l.useMemo(()=>a&&!t?{color:e.grey[20],borderColor:e.grey[20],backgroundColor:e.grey[0]}:a&&t?{color:e.grey[0],borderColor:e.grey[20],backgroundColor:e.grey[20]}:t?{color:e.grey[0],borderColor:e[o].main,backgroundColor:e[o].main}:{color:e[o].main,borderColor:e[o].main,backgroundColor:e.grey[0]},[o,a,t,e]);return{color:r.color,backgroundColor:r.backgroundColor,borderColor:r.borderColor,"input:hover:not([disabled]) ~ &":{color:r.color,backgroundColor:r.backgroundColor,borderColor:r.borderColor}}}),v=({variant:o="filled",color:e="primary",disabled:n,...a})=>s.jsx(X,{disableFocusRipple:!0,disableRipple:!0,disableTouchRipple:!0,disabled:n,icon:s.jsx(I,{colorType:e,error:e==="error",disabled:n}),checkedIcon:s.jsx(Z,{colorType:e,variant:o,disabled:n}),indeterminateIcon:s.jsx(Y,{colorType:e,variant:o,disabled:n}),...a});try{v.displayName="Checkbox",v.__docgenInfo={description:"",displayName:"Checkbox",props:{action:{defaultValue:null,description:"A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",name:"action",required:!1,type:{name:"Ref<ButtonBaseActions>"}},focusVisibleClassName:{defaultValue:null,description:`This prop can help identify which element has keyboard focus.
The class name will be applied when the element gains the focus through keyboard interaction.
It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a \`focus-visible\` class to other components
if needed.`,name:"focusVisibleClassName",required:!1,type:{name:"string"}},LinkComponent:{defaultValue:{value:"'a'"},description:"The component used to render a link when the `href` prop is provided.",name:"LinkComponent",required:!1,type:{name:"ElementType<any>"}},onFocusVisible:{defaultValue:null,description:"Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",name:"onFocusVisible",required:!1,type:{name:"FocusEventHandler<any>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLButtonElement>"}},component:{defaultValue:null,description:`The component used for the root node.
Either a string to use a HTML element or a component.`,name:"component",required:!1,type:{name:'"button"'}},variant:{defaultValue:{value:"filled"},description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:'"outlined"'},{value:'"filled"'}]}}}}}catch{}try{checkbox.displayName="checkbox",checkbox.__docgenInfo={description:"",displayName:"checkbox",props:{action:{defaultValue:null,description:"A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",name:"action",required:!1,type:{name:"Ref<ButtonBaseActions>"}},focusVisibleClassName:{defaultValue:null,description:`This prop can help identify which element has keyboard focus.
The class name will be applied when the element gains the focus through keyboard interaction.
It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a \`focus-visible\` class to other components
if needed.`,name:"focusVisibleClassName",required:!1,type:{name:"string"}},LinkComponent:{defaultValue:{value:"'a'"},description:"The component used to render a link when the `href` prop is provided.",name:"LinkComponent",required:!1,type:{name:"ElementType<any>"}},onFocusVisible:{defaultValue:null,description:"Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",name:"onFocusVisible",required:!1,type:{name:"FocusEventHandler<any>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLButtonElement>"}},component:{defaultValue:null,description:`The component used for the root node.
Either a string to use a HTML element or a component.`,name:"component",required:!1,type:{name:'"button"'}},variant:{defaultValue:{value:"filled"},description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:'"outlined"'},{value:'"filled"'}]}}}}}catch{}export{v as C};
//# sourceMappingURL=checkbox-85c87f7b.js.map
